<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>番茄助手破解</title>
    <url>/2020/04/02/%E7%95%AA%E8%8C%84%E5%8A%A9%E6%89%8B%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<p>VS之前下载了番茄助手扩展程序，配色和自动提示很好，试用期结束了，在网上找到了破解补丁进行破解。<a id="more"></a></p>
<p>补丁资源在OneDrive里面，基本按照补丁的要求来就行。首先VS按照正版番茄助手，其次关闭VS，打开补丁进行安装（需要注意的是新版本的补丁加了壳，总被杀掉，各种版本多试试），再次打开VS，选择注册番茄助手，输入补丁附带的.txt中的注册信息即可。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>OpenCV学习（Mat数据类型）</title>
    <url>/2020/03/29/OpenCV%E5%AD%A6%E4%B9%A0%EF%BC%88Mat%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>单目三维成像（实验2）</title>
    <url>/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/</url>
    <content><![CDATA[<p>按照师兄的要求，测试高斯拟合得到连续depth map的方法在平坦区域的表现，探寻平坦区域纹理对depth map结果的影响，并与之前的离散depth map算法以及Helicon Focus软件结果进行对照。<a id="more"></a></p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="无纹理"><a href="#无纹理" class="headerlink" title="无纹理"></a>无纹理</h3><h4 id="拍摄图像"><a href="#拍摄图像" class="headerlink" title="拍摄图像"></a>拍摄图像</h4><p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/001.jpg" alt="001.jpg"></p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/002.jpg" alt="002.jpg"></p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/003.jpg" alt="003.jpg"></p>
<h4 id="高斯拟合结果"><a href="#高斯拟合结果" class="headerlink" title="高斯拟合结果"></a>高斯拟合结果</h4><p>size  = 3:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wuwenli_size3.jpg" alt="wuwenli_size3.jpg"></p>
<p>size  = 31:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wuwenli_size31.jpg" alt="wuwenli_size31.jpg"></p>
<p>size  = 3_31:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wuwenli_size3_31.jpg" alt="wuwenli_size3_31.jpg"></p>
<h4 id="原方法结果"><a href="#原方法结果" class="headerlink" title="原方法结果"></a>原方法结果</h4><p>size = 3:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wuwenli_oldMethod_size3.jpg" alt="wuwenli_oldMethod_size3.jpg"></p>
<p>size = 31:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wuwenli_oldMethod_size31.jpg" alt="wuwenli_oldMethod_size31.jpg"></p>
<h4 id="Helicon-Focus结果"><a href="#Helicon-Focus结果" class="headerlink" title="Helicon Focus结果"></a>Helicon Focus结果</h4><p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wuwenli_HF.jpg" alt="wuwenli_HF.jpg"></p>
<h3 id="有纹理"><a href="#有纹理" class="headerlink" title="有纹理"></a>有纹理</h3><h4 id="拍摄图像-1"><a href="#拍摄图像-1" class="headerlink" title="拍摄图像"></a>拍摄图像</h4><p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_001.jpg" alt="wenli_001.jpg"></p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_002.jpg" alt="wenli_002.jpg"></p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_003.jpg" alt="wenli_003.jpg"></p>
<h4 id="高斯拟合结果-1"><a href="#高斯拟合结果-1" class="headerlink" title="高斯拟合结果"></a>高斯拟合结果</h4><p>size  = 3:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_size3.jpg" alt="wenli_size3.jpg"></p>
<p>size  = 31:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_size31.jpg" alt="wenli_size31.jpg"></p>
<p>size  = 3_31:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_size3_31.jpg" alt="wenli_size3_31.jpg"></p>
<h4 id="原方法结果-1"><a href="#原方法结果-1" class="headerlink" title="原方法结果"></a>原方法结果</h4><p>size = 3:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_oldMethod_size3.jpg" alt="wenli_oldMethod_size3.jpg"></p>
<p>size = 31:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_oldMethod_size31.jpg" alt="wenli_oldMethod_size31.jpg"></p>
<h4 id="Helicon-Focus结果-1"><a href="#Helicon-Focus结果-1" class="headerlink" title="Helicon Focus结果"></a>Helicon Focus结果</h4><p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_HF.jpg" alt="wenli_HF.jpg"></p>
<h2 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h2><p>可以得到的结论是：</p>
<ul>
<li>首先在平台区域，有纹理能够更好地恢复深度。</li>
<li>HF结果是<strong>相反</strong>的，由于输入顺序的问题。</li>
<li>原<strong>离散</strong>方法表现较好，结果与HF结果相似。</li>
<li>高斯拟合的<strong>连续</strong>算法表现不好推测原因可能是：<ul>
<li>数据只有三组，插值极容易出错。</li>
<li>没有向原方法一样加入blur步骤，<strong>sum the degree of focus in the neighbourhood</strong>。</li>
</ul>
</li>
</ul>
<h2 id="修改高斯拟合算法"><a href="#修改高斯拟合算法" class="headerlink" title="修改高斯拟合算法"></a>修改高斯拟合算法</h2><p>增加blur步骤</p>
<h2 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="有纹理-1"><a href="#有纹理-1" class="headerlink" title="有纹理"></a>有纹理</h3><p>size = 3:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_newMethod_3.jpg" alt="wenli_newMethod_3.jpg"></p>
<p>size = 31:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_newMethod_31.jpg" alt="wenli_newMethod_31.jpg"></p>
<p>size = 3_31:</p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/wenli_newMethod_3_31.jpg" alt="wenli_newMethod_3_31.jpg"></p>
<h3 id="花瓣"><a href="#花瓣" class="headerlink" title="花瓣"></a>花瓣</h3><p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/depth.jpg" alt="depth.jpg"></p>
<p><img src="/2020/03/25/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C2%EF%BC%89/3d_newMethod.jpg" alt="3d_newMethod.jpg"></p>
<h3 id="实验结论-1"><a href="#实验结论-1" class="headerlink" title="实验结论"></a>实验结论</h3><p>可以看到修改后的算法结合了：</p>
<ul>
<li>sum modified Laplacian</li>
<li>gaussian fitting</li>
<li><p>adaptive size</p>
</li>
<li><p>上述3_31效果不如单纯的size = 31的原因还是由于插值数据太少，难以准确插值。</p>
</li>
<li>但是加入sum modified Laplacian步骤后，重建花瓣的效果发生了改变：<ul>
<li>平坦的区域变好了</li>
<li>高度精密变化的区域变差了</li>
</ul>
</li>
</ul>
<h2 id="要不要加入blur"><a href="#要不要加入blur" class="headerlink" title="要不要加入blur?"></a>要不要加入blur?</h2>]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（自适应尺寸）</title>
    <url>/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/</url>
    <content><![CDATA[<p>实现高斯拟合后，分析数据拟合得到的sigma数值，发现sigma数值为深度信息提供了置信度，基于此可以实现自适应尺寸的depth from defocus算法。<a id="more"></a></p>
<h2 id="sigma数据分析"><a href="#sigma数据分析" class="headerlink" title="sigma数据分析"></a>sigma数据分析</h2><p><strong>首先对sigma数据进行分析发现存在以下情况：</strong></p>
<ul>
<li>sigma为负且绝对值很大</li>
<li>sigma为正且绝对值很大</li>
<li>sigma为正且数值合理，1000量级</li>
</ul>
<p><strong>以下对上述三种情况对数据的反应进行分析：</strong></p>
<ul>
<li>数据接近，但拟合曲线成下凸状，考虑到数据接近只是维凸，所以可以看成是第二种情况的，只是数据误差造成了上凸转为下凸。</li>
<li>数据接近，且曲线呈上凸状。</li>
<li>数据比较符合高斯分布。</li>
</ul>
<p><strong>接着分析前两种情况的原因：</strong></p>
<ul>
<li>倘若处于非平坦区域 （尺寸过大），邻域内有清晰有模糊，互相抵消，得到的数据可能相差不大，可能出现第一、二种情况。</li>
<li>倘若处于平坦区域（尺寸过小），最模糊的情况下，Laplacian算子得到的清晰度趋近于0，高斯值趋于0。最清晰的情况下就会受到纹理的影响，有两种情况:<ul>
<li>纹理特征明显，高斯值趋于1</li>
<li>纹理特征不明显，高斯值趋于0，出现sigma的第一、二种情况。</li>
</ul>
</li>
</ul>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>设定sigma平方的上限20000，下限为0，尺寸范围为[3, 15]进行实验：</p>
<h2 id="不同尺寸下sigma符合要求的像素分布（mark图）"><a href="#不同尺寸下sigma符合要求的像素分布（mark图）" class="headerlink" title="不同尺寸下sigma符合要求的像素分布（mark图）"></a>不同尺寸下sigma符合要求的像素分布（mark图）</h2><p>可以看到验证了前面假设，随着尺寸增大，在平坦区域内清晰度呈高斯分布的像素越来越多。</p>
<p>size = 3:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/3_1.jpg" alt="3_1.jpg"></p>
<p>size = 5:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/5_1.jpg" alt="5_1.jpg"></p>
<p>size = 7:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/7_1.jpg" alt="7_1.jpg"></p>
<p>size = 9:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/9_1.jpg" alt="9_1.jpg"></p>
<p>size = 11:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/11_1.jpg" alt="11_1.jpg"></p>
<p>size = 13:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/13_1.jpg" alt="13_1.jpg"></p>
<p>size = 15:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/15_1.jpg" alt="15_1.jpg"></p>
<h2 id="自适应尺寸结果与单独尺寸结果对比"><a href="#自适应尺寸结果与单独尺寸结果对比" class="headerlink" title="自适应尺寸结果与单独尺寸结果对比"></a>自适应尺寸结果与单独尺寸结果对比</h2><p>可以看到尺寸过小时，由于平坦区域受到纹理的影响，难以还原出平坦的效果。整幅图更毛躁，但也验证了小尺寸的核还是适用于精密的结构。</p>
<p>size = 3:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/3_0.jpg" alt="3_0.jpg"></p>
<p>size = 5:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/5_0.jpg" alt="5_0.jpg"></p>
<p>size = 7:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/7_0.jpg" alt="7_0.jpg"></p>
<p>size = 9:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/9_0.jpg" alt="9_0.jpg"></p>
<p>同时尺寸过大时，图像上出现了黑斑，发现黑斑出现的地方正是高度起伏处，表明尺寸过大造成的深度还原不准确。但在平坦区域表现很好。</p>
<p>size = 11:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/11_0.jpg" alt="11_0.jpg"></p>
<p>size = 13:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/13_0.jpg" alt="13_0.jpg"></p>
<p>size = 15:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/15_0.jpg" alt="15_0.jpg"></p>
<p>自适应算法用大尺寸处理平坦区域，用小尺寸处理精密区域，结合两方优点，得到了很好的depth map。</p>
<p>size 3-15:</p>
<p><img src="/2020/03/24/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8%EF%BC%89/15_5.jpg" alt="15_5.jpg"></p>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（高斯拟合）</title>
    <url>/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/</url>
    <content><![CDATA[<p>从实验中可以看出，目前的深度图无法进行很好的三维成像，因此需要优化深度图求取算法。首先修改清晰度评价算子，其次采用高斯拟合的方法对数据进行优化。<a id="more"></a></p>
<h2 id="采用Laplacian算子"><a href="#采用Laplacian算子" class="headerlink" title="采用Laplacian算子"></a>采用Laplacian算子</h2><p>原来程序采用的是师妹提出的用正态分布优化后的Laplacian算子，但该算子在尺寸改变时，难以确定sigma数值。这不利于后续优化实验，因此暂时替换为传统的Laplacian算子。3 * 3的算子如下图所示。</p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/矩阵.jpg" alt="矩阵.jpg"></p>
<p>采用OpenCV自带的函数实现即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Laplacian(src, laplacianImg, <span class="number">-1</span>, kernelSize);</span><br></pre></td></tr></table></figure>
<h2 id="高斯拟合"><a href="#高斯拟合" class="headerlink" title="高斯拟合"></a>高斯拟合</h2><p>高斯拟合是指对一组符合高斯分布的数据，进行处理，求出满足分布的高斯曲线的参数。高斯拟合的原理如下图所示：</p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/原理.jpg" alt="原理.jpg"></p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/原理2.jpg" alt="原理2.jpg"></p>
<p><a href="https://www.cnblogs.com/pinard/p/5976811.html" target="_blank" rel="noopener">最小二乘原理</a></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码实现没特别难度，但需要强调的是对运行速度优化后，运行时间减小了几十倍。</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>采用的图像是：</p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/HFColor.jpg" alt="HFColor.jpg"></p>
<p>不同Laplacian核的尺寸的高斯拟合实验结果是：</p>
<p>size = 3</p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/size3.jpg" alt="size3.jpg"></p>
<p>size = 5</p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/size5.jpg" alt="size5.jpg"></p>
<p>size = 9</p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/size9.jpg" alt="size9.jpg"></p>
<p>size = 15</p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/size15.jpg" alt="size15.jpg"></p>
<p>size = 27</p>
<p><img src="/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%AB%98%E6%96%AF%E6%8B%9F%E5%90%88%EF%BC%89/size27.jpg" alt="size27.jpg"></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>深度影响模糊程度，也就是清晰度。深度剧烈变化的区域适合用小尺寸的清晰度评价算子；深度平坦变化的区域适合用大尺寸的清晰度评价算子。</li>
<li>尺寸不合理时，数据可能不会满足高斯分布，进而拟合出的sigma会出现不合理的情况：<ul>
<li>sigma趋向正无穷，表示数据接近。</li>
<li>sigma平方为负，根据正太分布公式可知，曲线呈下凸形状。进一步分析数据发现，基本上都是绝对值很大的负数，因此可以推测其物理意义同样是数据接近，只不过表现由略微上凸变为略微下凸，求得的深度仍具有物理意义。</li>
<li>sigma为正，但趋向0，表示数据有噪点，但这种情况不多。</li>
</ul>
</li>
<li>根据实验得到，这些不合理的情况导致的原因可能是尺寸过大或过下，难以定论。因此无法根据不合理的sigma值调整尺寸。而且fixed size也很难试用于整个图像。</li>
</ul>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ul>
<li>同一高度上不同纹理对清晰程度的判断是否有影响？</li>
</ul>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（众数滤波）</title>
    <url>/2020/03/23/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E4%BC%97%E6%95%B0%E6%BB%A4%E6%B3%A2%EF%BC%89/</url>
    <content><![CDATA[<p>众数滤波是一种与中值滤波相似的滤波方法，可以用来对depth map进行进一步处理，在此进行实现。<a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> C3DPlotDemo::modeBlur(cv::Mat src, cv::Mat dst, <span class="keyword">int</span> <span class="built_in">size</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">size</span> += <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> radius = <span class="built_in">size</span> / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = radius; i &lt; src.rows - radius; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = radius; j &lt; src.cols - radius; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> majority = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> m = i - radius; m &lt;= i + radius; ++m)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> n = j - radius; n &lt;= j + radius; ++n)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">						majority = src.ptr&lt;uchar&gt;(m)[n];</span><br><span class="line">					<span class="keyword">if</span> (majority == src.ptr&lt;uchar&gt;(m)[n])</span><br><span class="line">						count++;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						count--;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			dst.ptr&lt;uchar&gt;(i)[j] = majority;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（实验）</title>
    <url>/2020/03/11/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>利用多聚焦图像序列进行实验——求取深度图像，利用求得的深度图像和已有的颜色图像进行三维绘图。<a id="more"></a></p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>首先从师妹那里获得了defocus图像序列：</p>
<p><img src="/2020/03/11/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C%EF%BC%89/资源.png" alt="资源.png" style="zoom: 50%;"></p>
<p>测试程序代码，得到mask结果为：</p>
<p><img src="/2020/03/11/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C%EF%BC%89/mask.png" alt="mask.png" style="zoom:50%;"></p>
<p>将得到的mask按层次叠加得到depth图像：</p>
<p><img src="/2020/03/11/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C%EF%BC%89/depth_original.jpg" alt="depth_original.jpg" style="zoom: 20%;"></p>
<p>这里由于暂时没有Multi-focus Image Fusion的代码，将Helicon Focus软件得到的清晰图像作为color图像：</p>
<p><img src="/2020/03/11/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C%EF%BC%89/HFColor.jpg" alt="HFColor.jpg" style="zoom:20%;"></p>
<p>由于程序中暂时没有Multi-focus Image Fusion的代码，不支持直接从defocus图像序列中生成三维图像，因此将上文中得到的depth图像和color图像利用<strong>输入模拟图像接口</strong>输入程序，进行三维绘制得到如下结果。</p>
<p><img src="/2020/03/11/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C%EF%BC%89/3d_orig.png" alt="3d_orig.png" style="zoom: 67%;"></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>从实验结果可以看到结果很不佳，问题出在depth图像上，Helicon Focus程序得到的depth图像和我们得到的depth图像对比可以看到：</p>
<ul>
<li>存在很多的噪点（后面介绍中可以得到，这些噪点并不完全是<strong>坏的</strong>，其中一部分还是真实的、表面连续的情况的反应）</li>
<li>边界处的清晰度判定极不准确（蓝色框内）</li>
</ul>
<p><img src="/2020/03/11/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C%EF%BC%89/depth_original_new.jpg" alt="depth_original_new.jpg" style="zoom: 20%;"></p>
<ul>
<li>Helicon Focus得到的深度图也有问题，是离散的，这并不是真实的，思路是先得到离散的大片区域，后面绘制时候再连接区域与区域。</li>
</ul>
<p><img src="/2020/03/11/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E5%AE%9E%E9%AA%8C%EF%BC%89/depth_hf.jpg" alt="depth_hf.jpg" style="zoom: 20%;"></p>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（Helicon Focus软件调研）</title>
    <url>/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/</url>
    <content><![CDATA[<p>Helicon Focus是<a href="https://www.heliconsoft.com/heliconsoft-products/helicon-focus/" target="_blank" rel="noopener">HeliconSoft公司</a>的一款软件。<a id="more"></a>功能是对Z轴扫描的方式得到的多聚焦图像，进行多聚焦融合得到清晰的二维图像，实现景深延拓；并在多聚焦融合过程中利用DFD算法得到深度图，实现三维成像。并利用3d viewer进行三维显示。</p>
<h2 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h2><p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/主界面.png" alt="主界面.png"></p>
<h2 id="融合算法"><a href="#融合算法" class="headerlink" title="融合算法"></a>融合算法</h2><p>可以看到有三种融合方法，method B对图像序列顺序有要求，并可以生成深度图；method C是金字塔融合算法对顺序没有要求。由于method B是我们目前采用的算法，无论是求深度图还是求聚焦融合图像，因此后面主要考虑method B。</p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/method.png" alt="method.png" style="zoom: 67%;"></p>
<h2 id="Radius参数"><a href="#Radius参数" class="headerlink" title="Radius参数"></a>Radius参数</h2><p>半径参数是两种主要参数之一，范围是<strong>1-50</strong>，只对method A和method B适用。半径的作用暂时不清楚，越小深度图越精细，但容易受到噪点的影响，也容易产生光晕。</p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/radius.png" alt="radius.png" style="zoom:67%;"></p>
<p>改变Radius参数做了几组实验，结果如下。根据实验结果推测有两种可能：</p>
<ul>
<li><p>是sml算法中的半径</p>
</li>
<li><p>是在半径划定的区域内，若超过半数的像素来自于一幅图像，则该区域的像素全取自该图像</p>
</li>
</ul>
<p>半径1平滑4：</p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/DepthMap_1_4.jpg" alt="DepthMap_1_4.jpg" style="zoom: 20%;"></p>
<p>半径8平滑4：</p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/DepthMap_8_4.jpg" alt="DepthMap_8_4.jpg" style="zoom:20%;"></p>
<h2 id="Smoothing参数"><a href="#Smoothing参数" class="headerlink" title="Smoothing参数"></a>Smoothing参数</h2><p>范围是<strong>1-10</strong>，原文：<strong>For method B this value determines how depth map will be smoothed out.</strong>只知道决定了深度图如何平滑<a href="file:///D:/HeliconFocus/Helicon%20Focus%207/Help/english/HeliconFocus.html#HF_RENDER">参考</a>。</p>
<p>改变Smoothing参数进行实验，结果如下。看到随着平滑程度加深，图像变模糊。推测平滑的作用应该是卷积核卷积。</p>
<p>半径1平滑2：</p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/DepthMap_1_2.jpg" alt="DepthMap_1_2.jpg" style="zoom:20%;"></p>
<p>半径1平滑4：</p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/DepthMap_1_4.jpg" alt="DepthMap_1_4.jpg" style="zoom:20%;"></p>
<h2 id="3d输出"><a href="#3d输出" class="headerlink" title="3d输出"></a>3d输出</h2><p>Helicon Focus软件在method B融合时，可以输出3d模型，用他们公司的3d viewer软件就可以观看，界面如下。可以看到，允许用户选择成像质量、调节大小、旋转角度、自动旋转的速度、<strong>轮廓放大</strong>、<strong>平滑</strong>等。</p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/3d界面.jpg" alt="3d界面.jpg" style="zoom:67%;"></p>
<h2 id="Relief-Amplifier"><a href="#Relief-Amplifier" class="headerlink" title="Relief Amplifier"></a>Relief Amplifier</h2><p>调节的图像序列中相邻图像的间隔大小，宏观上表现就是轮廓是否明显。</p>
<h2 id="Smoothing"><a href="#Smoothing" class="headerlink" title="Smoothing"></a>Smoothing</h2><p>当完全不加Smoothing时，完全根据深度图像绘制，成阶梯状，如下图所示。</p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/ladder.png" alt="ladder.png" style="zoom: 67%;"></p>
<p><img src="/2020/03/09/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88Helicon-Focus%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%A0%94%EF%BC%89/smooth.png" alt="smooth.png" style="zoom: 67%;"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之Helicon Focus软件的想法是：首先对深度图进行处理，使得主要是区域性的、接着在绘制的时候可以调节各个区域之间的连接的平滑程度。</p>
<p>与我之前的想法有很多不同，单独对每个像素进行插值，确定精确的位置，在直接进行绘制，绘制过程中去除噪点。</p>
<p>明显它相对不太难，且对很多较为平滑的结构更适合。</p>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（DFD算法实现）</title>
    <url>/2020/03/08/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88DFD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    <content><![CDATA[<p>利用模拟的<strong>深度图像</strong>和<strong>清晰二维图像</strong>对3dplot程序进行修改和测试后，接下来保留3dplot程序对深度图和清晰的二维图的处理接口，增加对<strong>多聚焦图像序列</strong>进行处理的接口，并添加由上述序列计算深度图的部分。<a id="more"></a></p>
<h2 id="增加接口"><a href="#增加接口" class="headerlink" title="增加接口"></a>增加接口</h2><p>在资源视图创建项目-&gt;添加事件处理函数，利用文件对话框选中图像，与原来的接口大同小异，不同的是允许用户选中多幅图像。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt; C3DPlotDemo::readImage()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> iFilter;</span><br><span class="line">	<span class="function">CFileDialog <span class="title">FileOpenDlg</span><span class="params">(TRUE, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="comment">//隐藏只读选项、覆盖已有文件前提示一下、允许多选</span></span></span></span><br><span class="line"><span class="function"><span class="params">		OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT | OFN_ALLOWMULTISELECT,</span></span></span><br><span class="line"><span class="function"><span class="params">		_T(<span class="string">"Image Files (*.bmp; *.jpg; *.tif; *.png;)"</span></span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="string">"|*.bmp; *.jpg; *.tif; *.png; |"</span></span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="string">"Windows Bitmap (*.bmp)|*.bmp|"</span></span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="string">"JPEG (*.jpg)|*.jpg|"</span></span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="string">"TIF (*.tif)|*.tif|"</span></span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="string">"PNG (*.png)|*.png|"</span></span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="string">"All Files (*.*)|*.*||"</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="literal">NULL</span>)</span></span>;</span><br><span class="line">    <span class="comment">//m_ofn是一个结构体，定义了各个对话框的参数</span></span><br><span class="line">	FileOpenDlg.m_ofn.lpstrTitle = _T(<span class="string">"选择图片"</span>);</span><br><span class="line">	<span class="keyword">if</span> (iFilter != <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//GetOFN()函数返回m_ofn</span></span><br><span class="line">		FileOpenDlg.GetOFN().nFilterIndex = iFilter;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt; imageSequence;</span><br><span class="line">	<span class="keyword">if</span> (FileOpenDlg.DoModal() == IDOK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!m_3dDlg)</span><br><span class="line">		&#123;</span><br><span class="line">            <span class="comment">//如果m_ofn.Flags设置了OFN_ALLOWMULTISELECT标志, 则调用此成员函数以检索列表中第一个文件路径名的位置。</span></span><br><span class="line">			POSITION fileNamesPosition = FileOpenDlg.GetStartPosition();</span><br><span class="line">			<span class="keyword">while</span> (fileNamesPosition != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				CString cfilePath = FileOpenDlg.GetNextPathName(fileNamesPosition);</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">string</span> filePath = cstring2string(cfilePath);</span><br><span class="line">				imageSequence.push_back(cv::imread(filePath));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> imageSequence;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> imageSequence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>cstring2string()</code>是<code>cstring</code>转为<code>string</code>的函数，就不放上来了。参考<a href="https://docs.microsoft.com/zh-cn/cpp/mfc/reference/cfiledialog-class?view=vs-2019#inheritance-hierarchy" target="_blank" rel="noopener">msdn</a></p>
<h2 id="DFD算法原理及实现"><a href="#DFD算法原理及实现" class="headerlink" title="DFD算法原理及实现"></a>DFD算法原理及实现</h2><p><strong>DFD算法的实现代码不能放到这里，是由师妹主要去做的，在此介绍算法的原理。</strong></p>
<p>DFD全程Depth From Focus是一种从二维图像中三维重建的算法。大体原理是，对物体进行成像，使得物体最高或最低处成像清晰，之后保持成像系统参数不变，向上或向下移动物体，对物体进行扫描。利用成像系统景深小的原理，得到一系列部分清晰部分模糊的像，通过对像素的清晰度进行评价，可以得到哪个深度的像素最清晰，进而可以确定各个像素属于哪个深度。</p>
<p>之后通过前期调研，该方法很适合显微领域的三维重建。比如DFD天然利用了显微系统景深小的特性，且显微领域内的重建对自动化水平要求不高，且可以引入扫描载物台设备。</p>
<h3 id="确定清晰度评价方法"><a href="#确定清晰度评价方法" class="headerlink" title="确定清晰度评价方法"></a>确定清晰度评价方法</h3><p>如何评价清晰程度是DFD算法的关键，目前清晰度评价在<strong>多聚焦融合</strong>和<strong>自动对焦</strong>等应用上的研究比较深入。方法有很多，一方面是基于空域的<strong>梯度</strong>和<strong>二阶导</strong>等算子，另一方面是基于各种频域变换得到的<strong>高频部分</strong>。空域部分的算法有：</p>
<p><img src="/2020/03/08/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88DFD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%89/空域清晰度评价算法.jpg" alt="空域清晰度评价算法" style="zoom: 67%;"></p>
<p>文献 Multi-focus image fusion algorithm based on Laplacian pyramids中使用的是sum-modified-laplacian算法进行清晰度评价：</p>
<script type="math/tex; mode=display">
\nabla_{M}^{2} I(x, y)=\left|\frac{\partial^{2} I}{\partial x^{2}}\right|+\left|\frac{\partial^{2} I}{\partial y^{2}}\right|</script><p>离散的形式选择步长为1：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\nabla_{M}^{2} I(x, y)=&|2 I(x, y)-I(x-1, y)-i(x+1, y)| \\
&+|2 I(x, y)-I(x, y-1)-i(x, y+1)|
\end{aligned}</script><p>阈值T和步长的选取影响着结果：</p>
<script type="math/tex; mode=display">
\mathrm{SML}=\sum_{x=i-w}^{i+w} \sum_{y=j-w}^{j+w} \nabla_{M}^{2} I(x, y), \quad \text { for } \nabla_{M}^{2} I(x, y) \geq T</script><p>师妹在测试sml算法时，算法的表现不佳，结合文献 Defocus map estimation from a single image 对sml算法进行优化。<strong>将拉普拉斯算子优化为一个高斯核</strong>，但是代码和算法好像有点出入：</p>
<ul>
<li>没对邻域内阈值以上的值取和</li>
<li>a方 + b方 再开放，而不是a的绝对值 + b的绝对值。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat laplace_x, laplace_y, laplace_img;</span><br><span class="line">cv::Mat kernel_x, kernel_y;</span><br><span class="line">Gaussian_kernel(<span class="number">5</span>, <span class="number">0.5</span>, <span class="number">1</span>, kernel_x);</span><br><span class="line">Gaussian_kernel(<span class="number">5</span>, <span class="number">0.5</span>, <span class="number">2</span>, kernel_y);</span><br><span class="line">Convolution(src, kernel_x, laplace_x);</span><br><span class="line">Convolution(src, kernel_y, laplace_y);</span><br><span class="line">cv::Mat temp = laplace_x.mul(laplace_x) + laplace_y.mul(laplace_y);</span><br><span class="line">cv::<span class="built_in">pow</span>(temp, <span class="number">0.5</span>, laplace_img);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>由于DFD算法还未结合实际的高度数据，目前得到一组二值化的图像序列，图像i的x、y像素表示第i幅defocus图像的x，y像素是否是图像序列中最清晰的像素。</p>
<p>实验图像：</p>
<p><img src="/2020/03/08/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88DFD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%89/007.jpg" alt="007.jpg" style="zoom: 20%;"></p>
<p><img src="/2020/03/08/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88DFD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%89/008.jpg" alt="008.jpg" style="zoom:20%;"></p>
<p>结果中可以看出，第一幅图像和第二幅图像中清晰区域的分布情况：</p>
<p><img src="/2020/03/08/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88DFD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%89/mask_1.jpg" alt="mask_1.jpg" style="zoom:20%;"></p>
<p><img src="/2020/03/08/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88DFD%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%89/mask_2.jpg" alt="mask_2.jpg" style="zoom:20%;"></p>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>Qt学习（窗口控件）</title>
    <url>/2020/03/05/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<p>继承关系如下图所示<a id="more"></a></p>
<p><img src="/2020/03/05/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6%EF%BC%89/继承关系图.jpg" alt="继承关系图"></p>
<h2 id="基础窗口部件QWidget"><a href="#基础窗口部件QWidget" class="headerlink" title="基础窗口部件QWidget"></a>基础窗口部件QWidget</h2><p><code>QWidget</code>继承自<code>QObject</code>和<code>QPaintDevice</code>，前者是Qt所有对象类型的基类，后者是所有可以绘制对象的基类。</p>
<p><code>QWidget</code>的构造函数需要指定两个参数，一是父类指针，默认是空，<code>QWidget *parent = 0</code>；二是窗口类型<code>Qt::WindowFlags</code>，flag对窗口性质进行限定，具体查看帮助文档。</p>
<p>Qt其他控件继承自<code>QWidget</code>，其他控件也可以做主窗口，Qt控件和窗口的区别是有没有父类。</p>
<p><code>QWidget</code>还包括<code>setWindowState()</code>，设置窗口状态。</p>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p><code>QWidget</code>有关于布局的成员函数如下图，例如<code>x()</code>、<code>y()</code>分别返回部件在其父部件中的位置坐标。</p>
<p><img src="/2020/03/05/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6%EF%BC%89/布局.jpg" alt="布局" style="zoom: 20%;"></p>
<h2 id="对话框QDialog"><a href="#对话框QDialog" class="headerlink" title="对话框QDialog"></a>对话框QDialog</h2><p><code>QDialog</code>是所有对话框的基类，对话框分为modal和modeless两类。模态用<code>exec()</code>显示，非模态用<code>show()</code>显示。但构造时<code>setModal()</code>指定为模态后也可以用<code>show()</code>显示模态对话框，与exec显示的区别是不阻塞其他窗口。另外也可以通过<code>setWindowModality()</code>代替<code>setModal()</code>，区别是可以指定阻塞的窗口。</p>
<p>注意<code>QDialog</code>对象的作用域，如果不想<code>QDialog</code>对象在函数结束时被释放，可以用new指针分配内存，但关于其<strong>自动释放</strong>机制，我现在也不太清楚。</p>
<p><code>QDialog::accept()</code>和<code>QDialog::reject()</code>，两个函数都是对模态对话框的隐藏，但前者将<code>exec()</code>的返回值设为<code>Accepted</code>，后者设置为<code>Rejected</code>。例如<code>if (dialog.exec() == QDialog::Accepted)</code>。</p>
<h3 id="QColorDialog颜色对话框"><a href="#QColorDialog颜色对话框" class="headerlink" title="QColorDialog颜色对话框"></a>QColorDialog颜色对话框</h3><p>静态函数<code>QColorDialog::getColor()</code>可以创建对话框，返回获取的QColor颜色值，也可以创建<code>QColorDialog</code>对象。</p>
<h3 id="QFileDialog文件对话框"><a href="#QFileDialog文件对话框" class="headerlink" title="QFileDialog文件对话框"></a>QFileDialog文件对话框</h3><p>静态函数<code>getOpenFileName()</code>可以创建对话框，返回获取的文件路径名<code>QString</code>；选择多个文件用<code>getOpenFileNames()</code>，返回获取的文件路径名<code>QStringList</code>；<code>getSaveFileName()</code>可以实现文件保存和文件另存。</p>
<h3 id="QFontDialog字体对话框"><a href="#QFontDialog字体对话框" class="headerlink" title="QFontDialog字体对话框"></a>QFontDialog字体对话框</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> MyDialog::test()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">bool</span> ok;</span><br><span class="line">	QFont font = QFontDialog::getFont(&amp;ok, <span class="keyword">this</span>);</span><br><span class="line">	<span class="keyword">if</span> (ok)</span><br><span class="line">		<span class="keyword">this</span>.setFont(font);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		qDebug() &lt;&lt; <span class="string">"he has not choose new font"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="QInputDialog输入对话框"><a href="#QInputDialog输入对话框" class="headerlink" title="QInputDialog输入对话框"></a>QInputDialog输入对话框</h3><h3 id="QMessageBox消息对话框"><a href="#QMessageBox消息对话框" class="headerlink" title="QMessageBox消息对话框"></a>QMessageBox消息对话框</h3><p>用的比较多了，具体分类是question、information、warning、wrong、about。</p>
<h3 id="QProgressDialog进度对话框"><a href="#QProgressDialog进度对话框" class="headerlink" title="QProgressDialog进度对话框"></a>QProgressDialog进度对话框</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> MyDialog::test()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function">QProgressDialog <span class="title">dialog</span><span class="params">(tr(<span class="string">"文件复制进度"</span>)，tr(<span class="string">"取消"</span>)，<span class="number">0</span>， <span class="number">5000</span>， <span class="keyword">this</span>)</span></span>;</span><br><span class="line">	dialog.setWindowTitle(tr(<span class="string">"进度对话框"</span>))；</span><br><span class="line">	dialog.setWindowModality(Qt::WindowModal);</span><br><span class="line">	dialog.show();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		dialog.setValue(i);</span><br><span class="line">		QCoreApplication::processEvents();<span class="comment">//避免界面由于长时间不操作冻结</span></span><br><span class="line">		<span class="keyword">if</span>(dialog.wasCanceled())</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dialog.setValue(<span class="number">5000</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="错误信息对话框和向导对话框"><a href="#错误信息对话框和向导对话框" class="headerlink" title="错误信息对话框和向导对话框"></a>错误信息对话框和向导对话框</h3><h2 id="QFrame"><a href="#QFrame" class="headerlink" title="QFrame"></a>QFrame</h2><p><code>QFrame</code>的主要功能是用来实现不同的边框效果，主要由边框形状和边框阴影的组合来决定的。</p>
<p>边框形状例如。<code>QFrame::NoFrame</code>、<code>QFrame::Box</code>、<code>QFrame::Panel</code>、<code>QFrame::StyledPanel</code>、<code>QFrame::HLine</code>、<code>QFrame::VLine</code>、<code>QFrame::WinPanel</code>。</p>
<p>阴影形状例如：<code>QFrame::Plain</code>、<code>QFrame::Raised</code>、<code>QFrame::Sunken</code>。</p>
<p><code>QFrame</code>的子类有<code>QLabel</code>、<code>QLCDNumber</code>、<code>QSplitter</code>、<code>QStackedWidget</code>、<code>QToolBox</code>、<code>QAbstractScrollArea</code>类。</p>
<p><code>QAbstractScrollArea</code>是带滚动条的视图的基类。</p>
<h3 id="QLabel"><a href="#QLabel" class="headerlink" title="QLabel"></a>QLabel</h3><p>用来显示文本和图片。<code>scaledContents</code>函数可以按照<code>QLabel</code>对象尺寸缩放内容。</p>
<h2 id="QAbstractButton按钮控件"><a href="#QAbstractButton按钮控件" class="headerlink" title="QAbstractButton按钮控件"></a>QAbstractButton按钮控件</h2><p><code>QPushButtion</code>可以用<code>setMenu()</code>添加菜单，<code>QCheckBox</code>多选而<code>QRadioButton</code>单选，二者最好的配合<code>QGroupBox</code>使用，可以在传递信号槽的时候明确是哪个按钮，提供方便。</p>
<h2 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h2><p>四种显示模式：Normal、NoEcho、Password、PasswordEchoOnEdit()。</p>
<p>设置自动补全器——暂略，设置自动验证器：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QValidator *validator = <span class="keyword">new</span> QIntValidator(<span class="number">100</span>, <span class="number">999</span>, <span class="keyword">this</span>);</span><br><span class="line">QLineEdit *lineEdit = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">lineEdit-&gt;setValidator(validator);</span><br></pre></td></tr></table></figure></p>
<h2 id="QAbstractSpinBox"><a href="#QAbstractSpinBox" class="headerlink" title="QAbstractSpinBox"></a>QAbstractSpinBox</h2><p>子类是<code>QSpinBox</code>、<code>QDoubleSpinBox</code>、<code>QDateTimeEdit</code>。</p>
<h2 id="QAbstractSlider"><a href="#QAbstractSlider" class="headerlink" title="QAbstractSlider"></a>QAbstractSlider</h2><p>子类是<code>QScrollBbar</code>、<code>QSlider</code>、<code>QDial</code>。分别是用在<code>QScrollArea</code>类中实现滚动区域、滑动条、表盘。</p>
]]></content>
      <categories>
        <category>Qt学习</category>
      </categories>
  </entry>
  <entry>
    <title>MFC学习（基础）</title>
    <url>/2020/03/05/MFC%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
    <content><![CDATA[<p>MFC的一些基础知识汇总，便于理解MFC程序。<a id="more"></a></p>
<h2 id="用系统的API创建窗口"><a href="#用系统的API创建窗口" class="headerlink" title="用系统的API创建窗口"></a>用系统的API创建窗口</h2><h3 id="WinMain函数"><a href="#WinMain函数" class="headerlink" title="WinMain函数"></a>WinMain函数</h3><p>windows操作系统启动一个程序时，调用的是该程序的WinMain函数，相当于main函数，是个入口。</p>
<p>创建程序的步骤是：</p>
<ul>
<li>创建一个win32项目，不是控制台了</li>
<li>包含windows.h文件，包含了windows操作系统底层的API</li>
<li>WinMain函数定义</li>
<li>进行消息循环，不断地从消息队列中获取消息</li>
<li>编写窗口过程函数</li>
</ul>
<h3 id="handle（句柄）"><a href="#handle（句柄）" class="headerlink" title="handle（句柄）"></a>handle（句柄）</h3><p>在windows程序中，各种各样的资源（窗口、图标、光标、画刷），系统在创建这些资源的时候为他们分配内存，并返回这些资源的标识号——句柄。可以简单理解为学生的学号，细分为图标句柄、画刷句柄、光标句柄。</p>
<h3 id="消息和消息队列"><a href="#消息和消息队列" class="headerlink" title="消息和消息队列"></a>消息和消息队列</h3><p>点击鼠标，首先操作系统获取鼠标点击消息，将鼠标点击消息放到消息队列中，应用程序再从消息队列中获取鼠标点击消息，接着应用程序把要执行的内容当作消息，又分给操作系统，操作系统执行预先设定好的函数（回调函数）。</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>传入函数1中的函数，函数1执行时会用到。</p>
<h2 id="MFC（微软基础类库-）"><a href="#MFC（微软基础类库-）" class="headerlink" title="MFC（微软基础类库 ）"></a>MFC（微软基础类库 ）</h2><p>windows最底层用C语言写了几千个API，MFC用C++面向对象的思想对这些API又进行了封装，形成了几百个类。</p>
<p>主要学习MFC的框架设计思想。</p>
<p>帮助文档：msdn。</p>
<h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><h4 id="stdafx-h文件"><a href="#stdafx-h文件" class="headerlink" title="stdafx.h文件"></a>stdafx.h文件</h4><p>stdafx.h和stdafx.cpp，全称为standard application framework extensions 标准应用程序框架扩展，头文件包含了所有当前工程所需要的MFC include文件，cpp文件include了头文件。</p>
<p>建立工程的时候首先编译stdafx.cpp文件，将结果保存在了一个名为stdafx.pch的文件里（.pch后缀表示预编译头文件），当编译器编译其他.cpp文件时，编译器会参照阅读.pch文件，只要.cpp文件中包含了stdafx.h。</p>
<h4 id="afxwin-h文件"><a href="#afxwin-h文件" class="headerlink" title="afxwin.h文件"></a>afxwin.h文件</h4><p>af全程为Application Frame，x没有意义，afxwin.h是MFC编程必需的文件，只需要这一个文件就可以使用众多的控件。</p>
<h4 id="targetver-h文件"><a href="#targetver-h文件" class="headerlink" title="targetver.h文件"></a>targetver.h文件</h4><p>targetver定义了程序运行需要的最低Windows版本。</p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><code>CWinApp</code>应用程序基类，类中的虚函数<code>virtual BOOL InitInstance()</code>是程序入口。</p>
<p><code>CFrameWnd</code>窗口基类，在程序入口中创建窗口对象即可。其他例如<strong>循环取消息</strong>等工作都由MFC封装好了。</p>
<p>窗口对象调用<code>CWnd::ShowWindow()</code>显示窗口。<code>CWnd</code>是<code>CFrameWnd</code>的父类，还派生出了很多其他的窗口。</p>
<p>同样之后用<code>CWnd::UpdateWindow()</code>更新。</p>
<p>接着需要写m_pMainWnd = 窗口类对象地址，作用是<strong>保存指向应用程序对象主窗口的指针</strong>，获取到指针后，便于MFC封装的内容完成窗口的关闭、消息循环等操作。</p>
<p>配置项目属性为：<strong>在共享DLL中使用MFC</strong>。</p>
<h3 id="消息映射"><a href="#消息映射" class="headerlink" title="消息映射"></a>消息映射</h3><p>MFC中没有事件和信号槽的概念，只有消息映射的概念。消息映射是将消息和成员函数关联起来的<strong>表</strong></p>
<p>若使用消息映射，必须在<strong>类的声明中</strong>声明一个消息映射的宏<code>DECLARE_MESSAGE_MAP()</code>。在类的实现中，需要写入一个<strong>起始宏</strong>和<strong>结束宏</strong>，<code>BEGIN_MESSAGE_MAP</code>(为哪个类起始的消息机制, 这个类的父类)和<code>END_MESSAGE_MAP()</code>。</p>
<p>例如：窗口类声明中写声明宏、实现中起始宏和结束宏可以写在类的外面。起始宏和结束宏之间加入需要引入的<strong>消息宏</strong>，例如：需要引入鼠标左键按下消息，这里加入<code>ON_WM_LBUTTONDOWN()</code>。</p>
<p><code>ON_WM_LBUTTONDOWN()</code>这个相当于表中的key，接着查找帮助文档，得到key对应的value，也就是<code>afx_msg void OnLButtonDown(UINT, CPoint)</code>，将这个value，在类中声明并实现，相当于事件函数那么做。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>CString、CPaintDC画家类</p>
<h3 id="框架类"><a href="#框架类" class="headerlink" title="框架类"></a>框架类</h3><p>PreCreateWindow：创建前修改窗口外观的机会</p>
<p>create创建窗口，发送WM_CREATE消息，oncreate函数响应。</p>
<p>ondraw onpaint画图的槽函数</p>
<p>afx开头的是全局函数，EX结尾的是扩展函数（？参数多一些）</p>
<p>afx_msg开头的函数，基本是槽函数afx_msg没有用。</p>
<p>CStatic静态控件类，例如label</p>
]]></content>
      <categories>
        <category>MFC学习</category>
      </categories>
  </entry>
  <entry>
    <title>VS配置项目属性</title>
    <url>/2020/03/05/VS%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>通常我们使用vs需要用到附加的工具库，例如opencv，这时需要对项目属性进行配置。<a id="more"></a></p>
<p>配置项目属性可以通过<strong>项目-&gt;属性</strong>打开项目属性页进行配置，项目属性页上方可以选择配置debug/release/所有配置，以及x64/x86。</p>
<p>通常配置的内容包括：CV++目录-&gt;包含目录/库目录、链接器-&gt;输入-&gt;附加依赖项。</p>
<p>到此一般配置即可完成，但对于常用的工具库，每次配置未免麻烦。此时可以在属性管理器中添加属性表，属性表与项目属性一同构筑项目属性，但属性表的优先级比后者低<a href="https://blog.csdn.net/wlk1229/article/details/65631111" target="_blank" rel="noopener">参考</a>。在属性表中配置上述属性后进行保存，以后每次新建工程时添加属性表即可。</p>
<p>如果项目是共享项目，不同人之间的属性表就不能共用了，附加依赖库多时，重新修改很麻烦。这里可以在配置项目属性的路径时使用<strong>环境变量</strong>，大家定义相同的环境变量即可。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（仿真实验）</title>
    <url>/2020/03/05/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E4%BB%BF%E7%9C%9F%E5%AE%9E%E9%AA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>3dplot程序目前只需输入一张图像，将图像的像素值作为z值，像素坐标作为x和y，在矩阵中利用点绘制函数进行绘制。<a id="more"></a></p>
<p>同时将像素值与光线模型相结合生成该点的颜色信息，在绘制前利用函数装载颜色进行绘制。</p>
<p>也就是说输入数据既是高度值又是颜色值，这与我们想要实现的效果不符。因此需要改动程序，使程序的颜色和高度分别来自两幅不同的图像。</p>
<h2 id="构建模拟图像"><a href="#构建模拟图像" class="headerlink" title="构建模拟图像"></a>构建模拟图像</h2><p>为了修改程序，由于缺乏上层环节数据的提供，在此用模拟的图像作为输入。根据3dplot程序，发现其代码对图像的要求是uchar。对通道的要求有些问题，应该是至少为3通道。</p>
<p>因此构建模拟图像的类型为<strong>CV_8UC3</strong>，后续在使用时增加一个图像格式转换接口。</p>
<p>利用OpenCV构建两幅简单的图像作为颜色和高度数据，绘制采用反锯齿模式，三角形、矩形、环形的灰度值分别是50、100、200。</p>
<p><img src="/2020/03/05/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E4%BB%BF%E7%9C%9F%E5%AE%9E%E9%AA%8C%EF%BC%89/height.jpg" alt="height" style="zoom: 67%;"></p>
<p><img src="/2020/03/05/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E4%BB%BF%E7%9C%9F%E5%AE%9E%E9%AA%8C%EF%BC%89/color.jpg" alt="color" style="zoom:67%;"></p>
<p>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> picWidth = <span class="number">1000</span>, picHeight = <span class="number">500</span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> Rect2i <span class="title">range</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, picWidth, picHeight)</span></span>;</span><br><span class="line">Mat <span class="built_in">image</span> = Mat::zeros(picHeight, picWidth, CV_8UC3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//rect</span></span><br><span class="line"><span class="keyword">int</span> rectWidth = <span class="number">300</span>, rectHeight = <span class="number">130</span>;</span><br><span class="line">Point rectLeftTop = Point(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">Point rectRightTop = rectLeftTop + Point(rectWidth, <span class="number">0</span>);</span><br><span class="line">Point rectRighButtom = rectLeftTop + Point(rectWidth, rectHeight);</span><br><span class="line">Point rectLeftButtom = rectLeftTop + Point(<span class="number">0</span>, rectHeight);</span><br><span class="line"><span class="keyword">if</span> (!(rectLeftTop.inside(range) &amp;&amp; rectRightTop.inside(range) </span><br><span class="line">	&amp;&amp; rectRighButtom.inside(range) &amp;&amp; rectLeftButtom.inside(range)))</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Point rectPoints[<span class="number">4</span>] = &#123; rectLeftTop, rectRightTop, rectRighButtom, rectLeftButtom &#125;;</span><br><span class="line"><span class="keyword">const</span> Point* rectPPT[<span class="number">1</span>] = &#123; rectPoints &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> rectNPT[<span class="number">1</span>] = &#123; <span class="number">4</span> &#125;;</span><br><span class="line">fillPoly(<span class="built_in">image</span>, rectPPT, rectNPT, <span class="number">1</span>, Scalar(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>), <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//triangle</span></span><br><span class="line"><span class="keyword">int</span> triangleSize = <span class="number">130</span>;</span><br><span class="line">Point triangleTop = Point(<span class="number">200</span>, <span class="number">270</span>);</span><br><span class="line">Point triangleLeft = triangleTop + Point(<span class="number">0</span>, triangleSize);</span><br><span class="line">Point triangleRight = triangleTop + Point(<span class="number">300</span>, triangleSize);</span><br><span class="line"><span class="keyword">if</span> (!(triangleTop.inside(range) &amp;&amp; triangleLeft.inside(range) &amp;&amp; triangleRight.inside(range)))</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Point trianglePoints[<span class="number">3</span>] = &#123; triangleTop, triangleLeft, triangleRight &#125;;</span><br><span class="line"><span class="keyword">const</span> Point* trianglePPT[<span class="number">1</span>] = &#123; trianglePoints &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> triangleNPT[<span class="number">1</span>] = &#123; <span class="number">3</span> &#125;;</span><br><span class="line">fillPoly(<span class="built_in">image</span>, trianglePPT, triangleNPT, <span class="number">1</span>, Scalar(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//circle</span></span><br><span class="line"><span class="keyword">int</span> radius = <span class="number">150</span>;</span><br><span class="line"><span class="function">Point <span class="title">center</span><span class="params">(<span class="number">700</span>, <span class="number">250</span>)</span></span>;</span><br><span class="line"><span class="built_in">circle</span>(<span class="built_in">image</span>, center, radius, Scalar(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>), <span class="number">20</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="修改程序"><a href="#修改程序" class="headerlink" title="修改程序"></a>修改程序</h2><p>根据前言可知我们需要修改程序代码。修改的部分包括：图像输入接口部分、光线模型的输入参数、计算颜色函数的参数。</p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>实验结果如下图所示，当前使用<code>GL_QUADS</code>和<code>GL_FILL</code>绘制模式绘制。颜色填充的原则是内部过程，因此侧边显示的是由彩色到黑色的渐变过程。</p>
<p><img src="/2020/03/05/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E4%BB%BF%E7%9C%9F%E5%AE%9E%E9%AA%8C%EF%BC%89/3d.jpg" alt="3d" style="zoom: 63%;"></p>
<p><img src="/2020/03/05/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E4%BB%BF%E7%9C%9F%E5%AE%9E%E9%AA%8C%EF%BC%89/3d2.jpg" alt="3d2" style="zoom:67%;"></p>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（配置3dplot项目属性）</title>
    <url>/2020/03/05/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E9%85%8D%E7%BD%AE3dplot%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7%EF%BC%89/</url>
    <content><![CDATA[<p>项目依赖的附加开发库有OpenCV、OpenGL、GLM、freetype。其中opencv通过添加属性表配置，freetype经过测试好像没用到，暂未添加。<a id="more"></a></p>
<h2 id="vs配置opengl"><a href="#vs配置opengl" class="headerlink" title="vs配置opengl"></a>vs配置opengl</h2><p>OpenGL是一种接口标准，具体实现交给了各大显卡厂家，OpenGL是与硬件交互的API，可以视为<strong>嵌入式</strong>那一路的。</p>
<p>glu库是OpenGL的上一层封装，定义了一些使用函数，这些函数以glu开头。</p>
<p>glut与窗口相关是更上层的封装，可以用作OpenGL程序的跨平台开发工具包。glfw是更轻量的跨平台库，用来代替glut。本项目的窗口部分用MFC构建，因此暂时不考虑glut。</p>
<p>由于vs自带了opengl32.lib和glu32.lib以及他们的包含目录，因此在配置属性时无需指定包含目录和库目录，只要在链接器中输入opengl32.lib和glu32.lib即可。</p>
<h2 id="配置GLM"><a href="#配置GLM" class="headerlink" title="配置GLM"></a>配置GLM</h2><p>OpenGL与DirextX不同，没有内置的数学库，无法进行矩阵运算，需要借助第三方的库GLM(OpenGL Mathematics)。</p>
<p>作为一个header only库，GLM只要包括了相应的头文件就可以使用它提供的类和函数。GLM是C++语言编写的，故不适用于C语言工程。</p>
<p>因此在配置时将glm文件夹放入vs的include文件夹即可使用。</p>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>颜色合成（调研）</title>
    <url>/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/</url>
    <content><![CDATA[<p>对荧光图像染色合成进行调研。<a id="more"></a></p>
<h1 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h1><h2 id="荧光显微镜"><a href="#荧光显微镜" class="headerlink" title="荧光显微镜"></a>荧光显微镜</h2><p>荧光显微镜是指用荧光来产生一个图像的任何显微镜。对光源要求使用近乎单色光照明。<br>一个样本被两个荧光团标记，通过设置激发波片可以切换两个荧光团的激发波长。<!--more-->每个荧光团发射波长也是确定的，可以通过确定的波片滤出来。滤出来的两幅图像就是这个样本不同结构的图像，这时候往往要染色，因为直接叠加的话就和传统光学显微镜一样，灰度域难以分辨，荧光没意义了。因此要染色，不是真彩色而是赋予这个结构这个颜色，也往往不用对应发射波长的颜色，因为没必要，发射波长的颜色也不是它真的颜色，就算是真的颜色也可以改，我们要的是”清晰“。那么得到了几个灰度图像了，怎么染色，怎么合成。</p>
<p>染色是为了从颜色上区别。但是融合却要根据初始的图像信息取融合，这里不用RGB空间，用HIS空间或者其他是不是更好，融合时比较的原始的I图像，但是实际加上的像素是彩色的。RGB空间有没有问题我不知道…难点出来了，怎么样取颜色合成？？？？？</p>
<h2 id="落射式荧光显微镜"><a href="#落射式荧光显微镜" class="headerlink" title="落射式荧光显微镜"></a>落射式荧光显微镜</h2><p><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/落射式.png" alt="落射式.png" style="zoom:50%;"></p>
<h2 id="共聚焦荧光显微镜"><a href="#共聚焦荧光显微镜" class="headerlink" title="共聚焦荧光显微镜"></a>共聚焦荧光显微镜</h2><p><em>从一个点光源发射的探测光通过透镜聚焦到被观测物体上，如果物体恰在焦点上，那么反射光通过原透镜应当汇聚回到光源，这就是所谓的共聚焦，简称共焦。共焦显微镜在反射光的光路上加上了一块半反半透镜（dichroic mirror），将已经通过透镜的反射光折向其它方向，在其焦点上有一个带有“针孔”（Pinhole），小孔就位于焦点处，挡板后面是一个光电倍增管（photomultiplier tube，PMT）。可以想像，探测光焦点前后的反射光通过这一套共焦系统，必不能聚焦到小孔上，会被挡板挡住。于是光度计测量的就是焦点处的反射光强度。其意义是：通过移动透镜系统可以对一个半透明的物体进行三维扫描。</em><br>——维基百科</p>
<h2 id="超分辨荧光显微镜"><a href="#超分辨荧光显微镜" class="headerlink" title="超分辨荧光显微镜"></a>超分辨荧光显微镜</h2><h2 id="全内反射荧光显微镜"><a href="#全内反射荧光显微镜" class="headerlink" title="全内反射荧光显微镜"></a>全内反射荧光显微镜</h2><h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>按层次分为像素级、特征级和决策级的融合。像素级融合包括频域和空域上的处理，相比其他两种层级的融合方法需要更大的计算量，但包含的信息更足。目前像素级的融合方法很多，特征级的融合方法随着CNN发展也多了起来。像素级融合方法有基于空域、频域和色彩空间的方法。</p>
<p>经典的频域方法有：金字塔、小波。<br>处理的流程一般是：</p>
<ul>
<li>对待核成图像进行变换。</li>
<li>根据低频高频分别设定不同的融合规则。</li>
<li>反变换得到融合图像。</li>
</ul>
<p>常用的基于色彩空间融合的算法根据具体功能和计算效率选择不同的色彩模型，色彩模型有RGB、HSV、YUV等。</p>
<h2 id="运用图像处理软件将同视野两种单标记免疫荧光图像合成为双标记图像的方法研究-2005"><a href="#运用图像处理软件将同视野两种单标记免疫荧光图像合成为双标记图像的方法研究-2005" class="headerlink" title="运用图像处理软件将同视野两种单标记免疫荧光图像合成为双标记图像的方法研究[2005]"></a>运用图像处理软件将同视野两种单标记免疫荧光图像合成为双标记图像的方法研究[2005]</h2><p>单标记是对一个样本进行标记，多标记是对一个样本多个标记。可否对一个样本进行多次单标记？？？这样就可以用两张单标记合成多标记了。但是应该不行，因此采用多标记滤色的方法可得到两张不同标记的图像再对其进行合成获得好效果。无论是落射式或者共聚焦式的显微镜都是如此。</p>
<h2 id="电子内窥镜实时图像处理系统-2019"><a href="#电子内窥镜实时图像处理系统-2019" class="headerlink" title="电子内窥镜实时图像处理系统[2019]"></a>电子内窥镜实时图像处理系统[2019]</h2><p>电子内窥镜针对荧光分子程序有两种方法。双传感器方案和单传感器方案，双传感器方案优势是同时获得两个波段的图像，但是缺点是图像有位置的偏差，这点对于图像融合很有影响。作者采用的是单传感器分时采集不同波段图像的方法。尽管损失了部分的时间和信息量，但目前的输出帧率足够应付。</p>
<p>文章在国内外研究现状中写到荧光显微镜系统有单传感器和多传感器两种，两种都有研究。<br>本文使用的是色彩空间融合算法，色彩空间融合在处理速度和内存占用上优于多分辨率融合。</p>
<h2 id="基于不同色彩空间融合的快速图像增强算法-2014"><a href="#基于不同色彩空间融合的快速图像增强算法-2014" class="headerlink" title="基于不同色彩空间融合的快速图像增强算法[2014]"></a>基于不同色彩空间融合的快速图像增强算法[2014]</h2><p>Retinex算法存在色彩失真、噪声放大和光晕伪影的问题。<br>本文提出了一种改进算法，</p>
<h1 id="软件调研"><a href="#软件调研" class="headerlink" title="软件调研"></a>软件调研</h1><p>本文将按颜色合成的子功能对ToupView\ImagePro10\ImageProPlus6.0三款软件进行比较分析，并阐述我们实现对该子功能的实现情况。<!--more-->由于ImageProPlus6.0与ToupView的颜色合成程序几乎一致，大多数比较的是ToupView与ImagePro10的差异。</p>
<p>我将颜色合成功能划分为以下子功能：添加图片、删除图片、隐藏图片、染色、编辑染料库、位置调节、直方图拉伸、图像参数调节（亮度、对比度、gamma值）、设定背景图片、重置程序。</p>
<h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><h3 id="添加图片方式"><a href="#添加图片方式" class="headerlink" title="添加图片方式"></a>添加图片方式</h3><p>三款软件添加图片功能如下图所示。比较得到ImageProPlus6.0和ToupView采用<strong>切换QCombobox+QButton</strong>的方法添加，而ImagePro10采用<strong>切换QCombobox</strong>方式添加，并且具有<strong>Add All</strong>的功能。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImageProPlus6.0主窗口.png" alt="ImageProPlus6.0主窗口.png" style="zoom: 50%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ToupView主窗口.png" alt="ToupView主窗口.png" style="zoom: 50%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10主窗口.jpg" alt="ImagePro10主窗口.jpg" style="zoom:50%;"></p>
<h3 id="添加图片染色"><a href="#添加图片染色" class="headerlink" title="添加图片染色"></a>添加图片染色</h3><p>另外需要注意的是新加入图片的染料设定问题。ToupView和ImageProPlus6.0采用的是加入前弹出染色窗口供用户决定染料，而ImagePro10却直接按红绿蓝青黄品的顺序对图片进行<strong>自动染色</strong>。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImageProPlus6.0染色窗口.png" alt="ImageProPlus6.0染色窗口" style="zoom: 67%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ToupView染色窗口.png" alt="ToupView染色窗口" style="zoom:50%;"> </p>
<p>两种染色方式都有欠妥的地方，ToupView和ImageProPlus问题在于使用户在看不到整体合成效果的情况下进行染料选择，有可能会造成无效操作；ImagePro10的染色方式受到图片顺序和数目的限制。因此我们决定采用保守方法处理这个问题，即用户新加入的图片暂不染色保持Original状态。</p>
<h3 id="设定背景图片"><a href="#设定背景图片" class="headerlink" title="设定背景图片"></a>设定背景图片</h3><p>ImageProPlus6.0就有将图片设为背景图片的功能，ImagePro10将其保留下来并没有做出修改。而ToupView虽然也加入了这个功能，但表现与前两者差别很大。利用ImageProPlus6.0颜色合成测试图片测试。下图第一行是ToupView无背景模式和将绿色通道置为背景模式的情况，第二行是ImagePro10无背景模式和将绿色通道置为背景模式的情况。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ToupView背景图片_无.jpg" alt="ToupView背景图片_无.jpg"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ToupView背景图片_有.jpg" alt="ToupView背景图片_有.jpg">   </p>
<p><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro系列背景图片_无.jpg" alt="ImagePro系列背景图片_无.jpg"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro系列背景图片_有.jpg" alt="ImagePro系列背景图片_有.jpg"> </p>
<p>分析结果。首先观测ToupView的对比度发现，ToupView将绿色通道设为背景后仅仅将其染为白色。而ImageProPlus10将绿色通道置为背景后突出了红色和蓝色通道的内容。因此ImageProPlus6.0对“设为背景图片”的操作理解的更为正确。</p>
<p>接下来对ImageProPlus6.0结果进行分析。下图分别是绿色通道和红蓝通道的原图和绿色通道置为背景后的结果图。设定绿色通道为背景图像后结果表现为绿色通道填充红色和蓝色通道背景的效果。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro系列背景图片_G.jpg" alt="ImagePro系列背景图片_G.jpg" style="zoom: 67%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro系列背景图片_RB.jpg" alt="ImagePro系列背景图片_RB.jpg" style="zoom:67%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro系列背景图片_有.jpg" alt="ImagePro系列背景图片_有.jpg" style="zoom:67%;"> </p>
<p>接下来考虑如何实现ImagePro10同样的效果。主要有两条思路，一是改变融合方式，二是利用图像分割提取红蓝图像的前景图像。以上两点可以通过用不同亮度的绿色图像进行试验。</p>
<p>红蓝通道为零的部分用绿通道填充。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat pic_orig = imread(<span class="string">"C:\\Users\\ThinkPad\\Desktop\\Composite_1.jpg"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pic_orig.rows; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pic_orig.cols; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">0</span>] + pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">2</span>] != <span class="number">0</span></span><br><span class="line">            &#123;</span><br><span class="line">                pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    imwrite(<span class="string">"C:\\Users\\ThinkPad\\Desktop\\result_1.jpg"</span>, pic_orig);</span><br><span class="line">    waitKey(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/result_1.jpg" alt="result_1.jpg"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro系列背景图片_有.jpg" alt="ImagePro系列背景图片_有.jpg"> </p>
<p>红蓝通道为小于绿通道的部分用绿通道填充，结果接近。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat pic_orig = imread(<span class="string">"C:\\Users\\ThinkPad\\Desktop\\Composite_1.jpg"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pic_orig.rows; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pic_orig.cols; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">0</span>] + pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">2</span>] </span><br><span class="line">                &gt; pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    imwrite(<span class="string">"C:\\Users\\ThinkPad\\Desktop\\result_1.jpg"</span>, pic_orig);</span><br><span class="line">    waitKey(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/result_2.jpg" alt="result_2.jpg"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro系列背景图片_有.jpg" alt="ImagePro系列背景图片_有.jpg"></p>
<h2 id="删除图片"><a href="#删除图片" class="headerlink" title="删除图片"></a>删除图片</h2><p>三款软件删除图片功能如下图所示。比较得到ImageProPlus6.0和ToupView采用<strong>选中图片+QButton</strong>的方法删除，而ImagePro10采用<strong>为每张图片配备删除Button</strong>方式删除。</p>
<p>分析得到ImagePro10的删除方式更优。用户操作更加方便，体现了ImagePro10<strong>去繁琐化</strong>和<strong>扁平化</strong>的设计理念，这种理念在后续比较中也不断闪现。因此我们选择的是ImagePro10的删除方式。</p>
<h2 id="隐藏图片"><a href="#隐藏图片" class="headerlink" title="隐藏图片"></a>隐藏图片</h2><p>三款软件隐藏图片功能如下图所示。比较得到三者都采用<strong>为每张图片配备删除Button</strong>方式隐藏图片。但是ImagePro10还增加了<strong>闪烁</strong>模式，并提供了接口调节闪烁频率。</p>
<p>分析闪烁功能。当多张图像闪烁时，闪烁图像均以相同的频率闪烁。删除和添加新图像时闪烁功能不变。调节未闪烁图像包括位置、亮度、对比度、gamma值等参数以及进行染色和直方图调节时闪烁功能不变。但是当进行最佳适配、重置等功能时，闪烁关闭跳转到正常显示。调节闪烁图片时唯一不同是调节亮度、对比度、gamma值等参数时闪烁功能关闭跳转到正常显示，表现出ImagePro10的闪烁功能主要用来下述情况——用户调整未闪烁的图像，并通过其他图像的闪烁观测正在调节的效果和合成的效果。</p>
<p>分析得到闪烁的目的是为了方便用户调节图片时既能看到正在调整的图片又可以看到融合后的效果。是有意义的功能待后续加入。</p>
<h2 id="染色功能"><a href="#染色功能" class="headerlink" title="染色功能"></a>染色功能</h2><p>染色功能是颜色合成中重要的一部分，三款软件都有些不同的地方。</p>
<p>ImageProPlus6.0和ToupView的界面如下图所示。ImageProPlus6.0和ToupView还是属于要素全面、等级分明的风格。允许用户选择预设染料、直接在染料库中选择染料、通过颜色选择染料且为用户提供了当前和所选染的RGB信息。但使用时发现ImageProPlus6.0在调节QSlider和按下按钮时QCombobox显示的染料没有对应变化，这是一个不足ToupView中已经改变。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImageProPlus6.0染色窗口.png" alt="ImageProPlus6.0染色窗口" style="zoom: 67%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ToupView染色窗口.png" alt="ToupView染色窗口" style="zoom:50%;"> </p>
<p>ImagePro10界面如下图所示。ImagePro10染色功能属于不同风格，是对它原始版本的优化。抛弃了“选中+按钮”进行唤出的模式转而为每张图片添加了一个唤出按钮。ImagePro10窗口如下图所示，首先用户可以在QCombobox中选择两种模式，自定义模式和选择从染料库中添加进来的常用染料。从窗口中看到自定义模式下，用户调整波长和颜色，调整波长时颜色会按照相应函数做出改变。而调整颜色时，波长不变。这样做的好处是不仅给用户提供了波长-颜色的对应基准还允许用户自由调节。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10染色窗口.jpg" alt="ImagePro10染色窗口" style="zoom: 50%;"></p>
<p>添加染料库中染料和编辑染料库功能可以通过点击齿轮图标唤出染料库窗口，如下图所示。用户选中QCheckBox就可以添加常用染料。编辑染料库功能后面进行比较。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10染料列表.jpg" alt="ImagePro10染料列表" style="zoom:67%;"></p>
<p>分析三款软件的染色功能。三款软件的染色功能主要是两种风格，比较图如下图所示。通过流程图可以强烈感受到ImagePro10设计中追求灵活和扁平化的想法。但通过和师兄讨论得到二者在伯仲之间，只是设计思想不同。博采众长采用了ToupView的主体思路，结合了ImagePro10的按波长索引染料和为每张图添加唤出按钮的想法。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/染色流程图.jpg" alt="test" style="zoom: 67%;"></p>
<h2 id="编辑染料库功能"><a href="#编辑染料库功能" class="headerlink" title="编辑染料库功能"></a>编辑染料库功能</h2><p>虽然三款软件选择染料的思想不同，但对染料库的编辑却大同小异。三者都包括了新建、删除、重置、保存修改、取消修改的功能。</p>
<p>ToupView界面如下图所示。允许用户保存或取消对当前染料的修改，允许用户对当前参数保存并重命名为新染料、允许用户删除当前染料、允许用户重新加载染料库。但是二者对染料库的修改都不得在颜色合成过程中进行。二者在新建染料时允许用户调节QSlider进行选择，但是一条颜色轴并未将所有颜色表示出来，其余的颜色用户可以点击显示颜色的按钮唤出系统自带的Color Dialog选择。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImageProPlus6.0编辑染料库窗口.png" alt="ImageProPlus6.0编辑染料库窗口.png" style="zoom:50%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/Toupview编辑染料库窗口.png" alt="Toupview编辑染料库窗口.png" style="zoom:50%;"></p>
<p>ImagePro10界面如下图所示。尽管ImagePro10编辑染料库还是这些功能，但表现的方式却不同。如下图所示ImagePro10并未通过切换的方式而是将所有的染料展示出来。另外由于允许用户一边染色一边修改染料，ImagePro10设计了一套逻辑来修改被当前染料染色的图片——当前染料被修改时，图片相应改变；当前染料被删除时，图片染色参数不变染料变为自定义模式。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10染料列表.jpg" alt="ImagePro10染料列表" style="zoom:67%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10新建染料窗口.jpg" alt="ImagePro10新建染料窗口"></p>
<p>ImagePro10新建染料时允许用户自由选择颜色，没有任何限制。有以下两种选择方式，如下图所示。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10新建染料选择颜色窗口_1.jpg" alt="ImagePro10新建染料选择颜色窗口_1.jpg" style="zoom:50%;"><br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10新建染料选择颜色窗口_2.jpg" alt="ImagePro10新建染料选择颜色窗口_2.jpg" style="zoom:50%;"></p>
<p>分析三款软件在编辑染料库功能上的设置。首先明确允许用户一边染色一边修改染料的原则。但由于我们未选择ImagePro10带有的自定义染色模式，这里对ImagePro染料库改变后的逻辑关系稍作修改，当图片染料被删除时会到不染色状态。另外关于新建染料颜色的选择方面，这里准备了RGB三条QSlider供用户调节。</p>
<h2 id="位置调节功能"><a href="#位置调节功能" class="headerlink" title="位置调节功能"></a>位置调节功能</h2><p>位置调节功能允许用户通过按钮对选中图像进行移动，来进行多层次的观察。这方面三款软件几乎一致，唯一不同之处在于ImagePro10抛弃了对全通道调节位置的功能。</p>
<p>分析得到ImagePro10出于功能去繁琐化的思想取消该功能是合理的，出于功能方面的考虑当图片没有相对移动时，进行位置移动是无意义的。我们目前还未取消这个功能。</p>
<h2 id="图像参数调节功能"><a href="#图像参数调节功能" class="headerlink" title="图像参数调节功能"></a>图像参数调节功能</h2><p>以下所有的图像参数调节功能都是对选中图片进行调节，可以选择单张图片或者所有图片。</p>
<h3 id="直方图拉伸"><a href="#直方图拉伸" class="headerlink" title="直方图拉伸"></a>直方图拉伸</h3><p>直方图拉伸是ImagePro10独有的调节对比度的方式，ImagePro10通过显示图像直方图，可以通过直方图映射的方式调节对比度也可以通过直方图更直观地调整亮度、对比度、gamma值等参数。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10直方图拉伸_1.jpg" alt="ImagePro10直方图拉伸_1.jpg"> </p>
<p>通过后续分析得到直方图映射实际也是最佳对比度调节的方法。未添加直方图显示的 功能，直方图映射通过后续的最佳对比度来实现。</p>
<h3 id="亮度对比度gamma参数"><a href="#亮度对比度gamma参数" class="headerlink" title="亮度对比度gamma参数"></a>亮度对比度gamma参数</h3><p>图像参数包括亮度、对比度、gamma值。单单靠染色进行合成往往无法达到满意的效果，调节图像参数的主要目的主要是使合成的图片更清晰。这点三款软件的功能无差别。<br><img src="/2020/03/05/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/ImagePro10直方图拉伸_1.jpg" alt="ImagePro10直方图拉伸_1.jpg"> </p>
<p>ImagePro10为我们提供了直方图映射关系，正因为这些关系函数我们实现了自己的图像参数调节功能，亮度、对比度、gamma公式依次是：</p>
<script type="math/tex; mode=display">
pix_out=pix_in+255*index_b</script><script type="math/tex; mode=display">
pix_out=255/((255-254*index_c))*（pix_in-127*index_c）</script><script type="math/tex; mode=display">
pix_out= ((pix_in)/255)^(index_g)*255</script><h2 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h2><p>ToupView和ImageProPlus6.0添加了Reset功能，即利用当前图像的原始图像重新开始颜色合成程序。</p>
<p>Reset功能在实际使用中还是能起到一定方便的作用，因此我们也有添加。</p>
]]></content>
      <categories>
        <category>颜色合成</category>
      </categories>
  </entry>
  <entry>
    <title>单目三维成像（调研）</title>
    <url>/2020/03/05/%E5%8D%95%E7%9B%AE%E4%B8%89%E7%BB%B4%E6%88%90%E5%83%8F%EF%BC%88%E8%B0%83%E7%A0%94%EF%BC%89/</url>
    <content><![CDATA[<p>假期这段时间主要阅读了文献，根据研究课题，首先阅读了一篇三维重建算法的综述性文献，同时借助网络查找了解了目前利用计算机视觉技术实现的三维重建算法。<a id="more"></a>接着对显微领域内三维重建的算法进行调研和文献查找，发现目前主要有借助三维重建算法中的单目变焦法和双目立体视觉技术两种思路。但对目前现有的产品进行调研，重点了解基于体视显微镜的三维重建和基于变焦法的产品信息，发现实际应用的产品主要是依靠变焦法进行三维重建。因此最后重点阅读了三篇变焦法的显微三维重建的相关文献，最后几天进行了总结。假期的一些其他时间学习了《Qt Creator快速入门》这本书的基本应用篇和图形动画篇。</p>
<h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><p>随着计算机视觉技术的发展，三维重建、三维测量是目前计算机视觉技术的研究热点，在AR、机器人、自动驾驶、勘测等等领域都有很大的应用空间。在显微领域对目标物体的三维重建、三维测量、三维显示同样具有很重要的应用前景，能够对精密零件进行检测、对生命科学中的细胞进行检测、对地质学中的微小矿物进行检测，因此显微领域的三维重建技术能够极大促进人们在显微领域做出更多的成果。</p>
<p>当前显微领域的三维测量技术主要依靠的手段是扫描电子显微镜、体视显微镜、探针技术。扫描电子显微镜通过激发和探测电子进行测量，具有很好的测量效果，但其必须保证目标物体具有导电性且能够处于真空状态的应用条件限制了其应用，而且具有价格高昂、耗时长的缺点。体视显微镜利用人眼直接观测目标物体，可以直观地看到目标物体的三维形态，但无法定性地获取目标物体的数码信息。扫描探针技术具有精度的限制以及探针可能会损伤目标物体的可能。</p>
<p>因此在显微领域需要开发一套数码三维显微成像系统，以光学显微镜为基础结合计算机视觉和图像处理技术，对目标物体精确、边界地建模、显示和测量。</p>
<p>目前三维重建的方法有很多，包括近年来手机视场应用广泛的结构光技术、tof技术等等，利用计算机视觉进行三维重建同样是三维重建领域的一大分支，且该类方法旨在从算法上进行改进，对硬件设备的要求不如前两种高。基于计算机视觉进行三维重建技术是指利用数字摄像机作为图像传感器，综合运用图像处理、数据计算等技术进行非接触的三维测量，用计算机程序获取物体的三维信息。目前的方法种类根据摄相机数目的不同大致分为单目视觉方法、双目视觉方法和三目视觉方法。</p>
<h2 id="基于计算机视觉的三维重建方法"><a href="#基于计算机视觉的三维重建方法" class="headerlink" title="基于计算机视觉的三维重建方法"></a>基于计算机视觉的三维重建方法</h2><h3 id="单目"><a href="#单目" class="headerlink" title="单目"></a>单目</h3><p>单目视觉方法是指仅使用一个摄像机镜头进行对目标物体的建模，对硬件设别的要求最小，能够适用于多个领域，是未来主流的发展方向。根据用来重建的图像来自于单视点或是多视点又可细分为两种方法。前者是主要通过图像的二维特征X推导深度信息，统称为shape from X方法。</p>
<p>后者主要通过匹配不同图像中相同的特征点，通过这些匹配约束求取空间中三维点的坐标信息。主要方法是运动法（shape from motion），运动法对图像的要求很低，可以用视频或随意拍摄的三维图像序列进行三维重建，且在重建的过程中对图像进行标定，省去了预先对摄像机进行标定的步骤，另一个优点是可以对大规模场景进行重建，适合自然地形和城市的三维重建。不足是运算量较大，且对于特征小的情况重建效果不佳。</p>
<p>Shape form X类方法又分为以下几种方法。</p>
<p>明暗度法（shape from shading）通过分析图像中的明暗信息，运用发射光模型，恢复出物体的表面信息。主要优势是可以从单幅图像中进行重建，但明暗度法对光照条件要求比较苛刻，难以在室外进行复杂的三维重建。</p>
<p>光度立体视觉法是在明暗度的基础上发展的算法，通过多个不共线的光源获取目标物体的多幅图像，将不同图像的亮度方程联立，通过求解出表面的法向量实现三维重建。光度法于明暗度法优缺点大致相同，通过使用多幅图像优化了明暗度法引起的一些病态问题。</p>
<p>纹理法（shape from texture）是通过分析目标物体表面的纹理信息的变形得到目标物体的表面信息，是模拟了人的感知的一种方法。优势是重建的速度和精度都很高，可以从单幅图像中重建，鲁棒性高，但缺点是只适用于表面具有规则纹理的物体。</p>
<p>轮廓法（shape from contours）可以分为基于体素、视壳和基于锥素的三种方法。</p>
<p>调焦法（shape from focus）是分析摄像机焦距、光圈和图像清晰度之间的关系恢复物体深度信息的方法，又分为聚焦法和离焦法。调焦法可以用少幅图像获取稠密的深度图，对光照和纹理的要求也较前几种方法低，不足是难以实现完全自动的重建。</p>
<h3 id="双目"><a href="#双目" class="headerlink" title="双目"></a>双目</h3><p>双目立体视觉法是一种模拟人眼利用视差恢复深度信息的一种方法。一般包括：图像获取、摄像机标定、特征提取和匹配、摄像机校正、立体匹配和三维建模六个步骤。双目立体视觉三维重建的方法依靠视差进行重建，因此发展较为成熟。但双目立体视觉技术需要对摄像机的模型进行标定，在实际应用中假若焦距和两摄像机相对位置发生改变后，需要重新标定，限制了应用，通常宏观中产品采用将两摄像头固定的方式。</p>
<h3 id="三目"><a href="#三目" class="headerlink" title="三目"></a>三目</h3><p>在双目的基础上还可以继续添加摄像头，发展出三目甚至多目系统。主要用于解决双目系统中的一些问题</p>
<ul>
<li>图像中重复或相似特征引起的误匹配。</li>
<li>采用外极线约束时平行外极线边缘的地方易模糊。</li>
<li>基线距离增加会产生特征点遮挡的问题。</li>
</ul>
<p>目前显微领域进行主要进行研究的基于计算机视觉的三维重建方法主要有两种：一种是借助双目立体视觉与体视显微镜相结合的方法进行三维重建；另一种是借助单目三维重建算法中的shape from focus算法设计出变焦显微三维测量系统。</p>
<h2 id="厂商调研"><a href="#厂商调研" class="headerlink" title="厂商调研"></a>厂商调研</h2><p>各大厂商主要采用了变焦法作为显微三维重建系统。</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=0rGdyCzJkCo" target="_blank" rel="noopener">徕卡DVM6演示视频</a></li>
<li><a href="https://www.youtube.com/watch?v=zvfZrCoyqB4" target="_blank" rel="noopener">蔡司smart zoom5演示视频</a></li>
<li><a href="https://www.alicona.com/cn/products/infinitefocus/" target="_blank" rel="noopener">Alicona官网</a></li>
<li><a href="http://www.hirox.com.cn/products/microscope/rh8800_02.html" target="_blank" rel="noopener">浩视官网</a> <a href="https://www.youtube.com/results?search_query=3D+digital+microscope" target="_blank" rel="noopener">演示视频</a></li>
</ul>
]]></content>
      <categories>
        <category>单目三维成像</category>
      </categories>
  </entry>
  <entry>
    <title>深入理解计算机系统（计算机系统漫游）</title>
    <url>/2019/11/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%EF%BC%88%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8%EF%BC%89/</url>
    <content><![CDATA[<p>文本文件是指每个字符用ASCⅡ码表示的文件，这里的ASCⅡ码是0-255的整数，刚好是一个字节；二进制文件就是将文本文件中的每个ASCⅡ码用一个字节的二进制表示。<a id="more"></a></p>
<h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>.c文件-&gt;<em>预处理器</em>-&gt;.i文件-&gt;<em>编译器</em>-&gt;.s文件-&gt;<em>汇编器</em>-&gt;.o文件-&gt;<em>链接器</em>-&gt;可执行目标程序。 </p>
<ul>
<li>预处理器：将头文件融入.c文件中</li>
<li>编译器：变成汇编语言</li>
<li>汇编器：变成机器语言（由文本文件转为了二进制文件）</li>
<li>连接器：将预编译好的机器语言结合进来（如printf函数）</li>
</ul>
<p>生成好的可执行目标程序即为处理器可直接解释的二进制文件，存储在内存当中。</p>
<h2 id="处理器读取解释指令"><a href="#处理器读取解释指令" class="headerlink" title="处理器读取解释指令"></a>处理器读取解释指令</h2><h3 id="计算机硬件组成"><a href="#计算机硬件组成" class="headerlink" title="计算机硬件组成"></a>计算机硬件组成</h3><p>可以看到有三条总线分别是：I/O总线、内存总线、系统总线。总线的传输单位是32位或64位。也就是说计算机分为三大部分：输入输出设备（键鼠\屏幕\硬盘\网络）、内存、处理器。</p>
<h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p>处理器处理过程实际很复杂，简单进行抽象称之为“指令集架构”。处理器由三部分构成：程序计数器(PC)、寄存器文件和算数逻辑单元(ALU)。程序计数器实质是一个字大小的寄存器，每次指向下一步指令所在的内存地址；寄存器文件通过该地址读取数据执行指令，然后更新PC；执行指令用到的逻辑运算借由ALU实现。</p>
<h3 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h3><p>系统从内存中读取指令又将执行结果输出到屏幕上，这个过程存在大量的复制操作。又由于不同硬件设备的读取效率差距很大，因此位保证程序执行过程的顺畅，需要借助高速缓存。</p>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>在上述执行程序的过程中，很多过程实际是借由操作系统完成的，操作系统是软件和硬件之间的桥梁。主要起到两个作用，一是防止硬件被失控的应用程序滥用；二是帮助应用程序控制硬件设备，操作系统通过两个抽象的概念实现这两个功能。</p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程是操作系统对运行一个程序的一种抽象，系统可同时运行多个 进程。但这实际是一种假象，是通过在不同进程之间切换达到的（单处理器）。</p>
<p>对多处理器分为多核和超线程两方面实现。多核即多个CPU集成，能同时执行多个进程；超线程技术是指缩短了处理器在不同进程之间切换的频率。多处理器的出现一方面减少了处理多进程时并发的需要（多核），另一方面对多线程编写的程序来说可以被执行的更快（多核和超线程）。</p>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程是组成进程的执行单元。</p>
<h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>系统为每个进程提供的虚拟内存控件。由小地址到大地址依次是：只读的代码和数据、堆、共享库、栈、内核虚拟内存（为系统内存保留的）。</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>I/O设备可以抽象成文件。</p>
]]></content>
      <categories>
        <category>深入理解计算机系统</category>
      </categories>
  </entry>
  <entry>
    <title>Leetcode刷题笔记（树）</title>
    <url>/2019/11/12/Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E6%A0%91%EF%BC%89/</url>
    <content><![CDATA[<p>数据结构中有很多树的结构，其中包括二叉树、二叉搜索树、2-3树、红黑树等。<a id="more"></a></p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树是树结构中的基础，又包括了满二叉树树和完全二叉树。</p>
<h2 id="二叉搜索树（BST）"><a href="#二叉搜索树（BST）" class="headerlink" title="二叉搜索树（BST）"></a>二叉搜索树（BST）</h2><p>没有键值相等的节点，左子树 &lt; 根节点 &lt;= 右子树。<br>遍历方式有：先序遍历、中序遍历、后序遍历、层序遍历。中序遍历可得到升序数列。</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>在树尽量平衡的情况下，插入和搜索的时间复杂度为O(log n)（树高决定了查找效率）</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>要删除节点是叶节点，直接删除，修改其根节点指针</li>
<li>要删除节点是单支节点，直接删除，修改其根节点指向子节点</li>
<li>要删除节点是双支节点，找到右子树的单支节点替换，之后删除改单支节点  <h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2>左右两子树高度差绝对值不超过 1 ，分为平衡二叉搜索树、红黑树。<h2 id="平衡二叉搜索树（AVL树）"><a href="#平衡二叉搜索树（AVL树）" class="headerlink" title="平衡二叉搜索树（AVL树）"></a>平衡二叉搜索树（AVL树）</h2>避免了BST退化成链表的情况。主要是通过旋转来进行调整，分为四种情况“左左、左右、右左、右右”。1和4情况通过单旋转完成，2和3则需要双旋转。<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2>性质及其繁杂。<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li>
<li>树结构对迭代很友好</li>
<li>有的题目，左右节点做参数容易，这样就要用两个函数将root节点和后续节点分开</li>
<li>BFS方法也是层序遍历，用队列实现容易</li>
<li>DFS方法也是先序遍历，用迭代实现容易</li>
<li>树结构从上往下找，容易；从下往上找，难<h1 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2>BFS和DFS两种思想。BFS用队列实现、DFS用迭代实现。<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2>BFS：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">deque</span>&lt;TreeNode*&gt; deq;</span><br><span class="line">		deq.push_back(root);</span><br><span class="line">		<span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!deq.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			depth++;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = deq.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				TreeNode* cur = deq.front();</span><br><span class="line">				deq.pop_front();</span><br><span class="line">				<span class="keyword">if</span>(cur-&gt;left) deq.push_back(cur-&gt;left);</span><br><span class="line">				<span class="keyword">if</span>(cur-&gt;right) deq.push_back(cur-&gt;right);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> depth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
DFS：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> l = maxDepth(root-&gt;left) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> r = maxDepth(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> l &gt; r ? l : r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，找出其最小深度。最小深度是从根节点到最近叶子节点的最短路径上的节点数量。<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2>BFS，判断每层是否有叶节点。<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">deque</span>&lt;TreeNode*&gt;deq;</span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">		    deq.push_back(root);</span><br><span class="line">		<span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!deq.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			depth++;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = deq.<span class="built_in">size</span>();		</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				TreeNode* current = deq.front();</span><br><span class="line">				deq.pop_front();</span><br><span class="line">				<span class="keyword">if</span>(!current-&gt;left &amp;&amp; !current-&gt;right) <span class="keyword">return</span> depth;</span><br><span class="line">				<span class="keyword">if</span>(current-&gt;left) deq.push_back(current-&gt;left);</span><br><span class="line">				<span class="keyword">if</span>(current-&gt;right) deq.push_back(current-&gt;right);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="108-将有序数组转换为AVL树"><a href="#108-将有序数组转换为AVL树" class="headerlink" title="108.将有序数组转换为AVL树"></a>108.将有序数组转换为AVL树</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2>二分法找node，用迭代的DFS一个一个放进去。<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(nums.empty())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">TreeNode* <span class="title">helper</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(left &gt; right)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">		TreeNode* node = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">		node-&gt;left = helper(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">		node-&gt;right = helper(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">		<span class="keyword">return</span> node;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，判断它是否是高度平衡的二叉树。<h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2>想到了用DFS求深度的情况，但做不出来。看了别人的代码，原理两次递归。<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">int</span> dif = <span class="built_in">abs</span>(depth(root-&gt;left) - depth(root-&gt;right));</span><br><span class="line">		<span class="keyword">return</span> (dif &lt;= <span class="number">1</span>) &amp;&amp; isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode* node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(depth(node-&gt;left), depth(node-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2>翻转一棵二叉树。<h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2>DFS递归没变，注意这里的返回值，很有意思。<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* temp = root-&gt;left;</span><br><span class="line">            root-&gt;left = root-&gt;right;</span><br><span class="line">            root-&gt;right = temp;</span><br><span class="line">            invertTree(root-&gt;left);</span><br><span class="line">            invertTree(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235.二叉搜索树的最近公共祖先"></a>235.二叉搜索树的最近公共祖先</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。<h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2>这题澄清了我之前对二叉搜索树的误解，其实是根节点左子树的所有结点小于根节点，右节点可类比。<h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;val &gt; q-&gt;val) <span class="keyword">return</span> lowestCommonAncestor(root, q, p);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;val &lt;= root-&gt;val &amp;&amp; q-&gt;val &gt;= root-&gt;val)</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;val &lt; root-&gt;val &amp;&amp; q-&gt;val &lt; root-&gt;val)</span><br><span class="line">			<span class="keyword">return</span> lowestCommonAncestor(root-&gt;left, p, q);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;val &gt; root-&gt;val &amp;&amp; q-&gt;val &gt; root-&gt;val)</span><br><span class="line">			<span class="keyword">return</span> lowestCommonAncestor(root-&gt;right, p, q);</span><br><span class="line">		<span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257.二叉树的所有路径"></a>257.二叉树的所有路径</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，返回所有从根节点到叶子节点的路径。<h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2>DFS方法，遇到叶子结点后添加路径结果，利用引用传递结果，记录添加叶结点之前的路径。<h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; binaryTreePaths(TreeNode* root)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> p;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">		helper(root, p, res);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="built_in">string</span> path, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;result)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">		path.append(to_string(root-&gt;val));</span><br><span class="line">		<span class="keyword">if</span>(root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">			result.push_back(path);</span><br><span class="line">		path.append(<span class="string">"-&gt;"</span>);</span><br><span class="line">		helper(root-&gt;left, path, result);</span><br><span class="line">		helper(root-&gt;right, path, result);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h1><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2>计算给定二叉树的所有左叶子之和。<h2 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h2>深度优先搜索，注意是叶子的结点。通常情况下，两个函数把递归分开，把返回值用传值引用代替好理解。但是太简单这么做就太low了。<h2 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a>代码描述</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; ! root-&gt;left-&gt;right)</span><br><span class="line">			<span class="keyword">return</span> root-&gt;left-&gt;val + sumOfLeftLeaves(root-&gt;left) + sumOfLeftLeaves(root-&gt;right);</span><br><span class="line">		<span class="keyword">return</span> sumOfLeftLeaves(root-&gt;left) + sumOfLeftLeaves(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="437-路径总和Ⅲ"><a href="#437-路径总和Ⅲ" class="headerlink" title="437.路径总和Ⅲ"></a>437.路径总和Ⅲ</h1><h2 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，它的每个结点都存放着一个整数值。找出路径和等于给定数值的路径总数。</li>
</ul>
<p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。</p>
<h2 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题很麻烦，没有确定的头和尾。用双重递归实现，一个确定头的情况，一个确定相对的尾的情况。</p>
<p>还可以用别的方法实现，BFS和DFS结合，实际思想和上述差不多。</p>
<h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> helper(root, sum) + pathSum(root-&gt;left, sum) + pathSum(root-&gt;right, sum);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		sum -= root-&gt;val;</span><br><span class="line">		<span class="keyword">return</span> (sum == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>) + helper(root-&gt;left, sum) + helper(root-&gt;right, sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h1><h2 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。</p>
<h2 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h2><p>二叉搜索树真的适合中序遍历。不过这个pre结点的设立还是挺不好操作的</p>
<h2 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* node, TreeNode*&amp; pre, <span class="keyword">int</span>&amp; min_num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node)</span><br><span class="line">        &#123;</span><br><span class="line">            helper(node-&gt;left, pre, min_num);</span><br><span class="line">            <span class="keyword">if</span>(pre)</span><br><span class="line">                min_num = <span class="built_in">min</span>(node-&gt;val - pre-&gt;val, min_num);</span><br><span class="line">            pre = node;</span><br><span class="line">            helper(node-&gt;right, pre, min_num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minimun = INT_MAX;</span><br><span class="line">        TreeNode* pre_root = <span class="literal">nullptr</span>;</span><br><span class="line">        helper(root, pre_root, minimun);</span><br><span class="line">        <span class="keyword">return</span> minimun;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h1><h2 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>
<h2 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题不和上题一样。</p>
<h2 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TreeNode* pre_root = <span class="literal">nullptr</span>;</span><br><span class="line">        helper(root, pre_root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* node, TreeNode*&amp; pre)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node)</span><br><span class="line">        &#123;</span><br><span class="line">            helper(node-&gt;right, pre);</span><br><span class="line">            <span class="keyword">if</span>(pre)</span><br><span class="line">                node-&gt;val = node-&gt;val + pre-&gt;val;</span><br><span class="line">            pre = node;</span><br><span class="line">            helper(node-&gt;left, pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="563-二叉树的坡度"><a href="#563-二叉树的坡度" class="headerlink" title="563.二叉树的坡度"></a>563.二叉树的坡度</h1><h2 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，计算整个树的坡度。</p>
<p>一个树的节点的坡度定义即为，该节点左子树的结点之和和右子树结点之和的差的绝对值。空结点的的坡度是0，整个树的坡度就是其所有节点的坡度之和。</p>
<h2 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h2><p>我终于明白了helper函数的用处了。有时候要做一个迭代，但不能在原函数上改，因为原函数的参数和返回值都确定了，所以用helper函数（注意这个helper函数的引用传参和返回值的不同）。</p>
<p>另外我终于明白了先序遍历和后序遍历的不同了，还有中序遍历。</p>
<h2 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTilt</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        helper(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">int</span>&amp; slope)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = helper(root-&gt;left, slope);</span><br><span class="line">        <span class="keyword">int</span> right = helper(root-&gt;right, slope);</span><br><span class="line">        slope += <span class="built_in">abs</span>(left - right);</span><br><span class="line">        <span class="keyword">return</span> left + right + root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="527-另一个树的子树"><a href="#527-另一个树的子树" class="headerlink" title="527.另一个树的子树"></a>527.另一个树的子树</h1><h2 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树</p>
<h2 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h2><p>上题目说了helper帮助实现单递归，这题是双重递归的典型。</p>
<h2 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* s, TreeNode* t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!s) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> isEqual(s, t) ? <span class="literal">true</span> : isSubtree(s-&gt;left, t) || isSubtree(s-&gt;right, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEqual</span><span class="params">(TreeNode* p, TreeNode* q)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p &amp;&amp; !q) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!p || !q) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> (p-&gt;val == q-&gt;val) &amp;&amp; isEqual(p-&gt;left, q-&gt;left) &amp;&amp; isEqual(p-&gt;right, q-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h1><h2 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p>
<p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p>
<h2 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h2><p>先序遍历？？我还以为是层序遍历。先序遍历，特别的是融合的过程。</p>
<h2 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* t1, TreeNode* t2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> t1;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> t2;</span><br><span class="line">        t1-&gt;val = t1-&gt;val + t2-&gt;val;</span><br><span class="line">        t1-&gt;left = mergeTrees(t1-&gt;left, t2-&gt;left);</span><br><span class="line">        t1-&gt;right = mergeTrees(t1-&gt;right, t2-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.二叉树的层平均值</h1><h2 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p>
<h2 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h2><p>层序遍历。下次考虑一下不用双端队列实现层序遍历。</p>
<h2 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; averageOfLevels(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; average;</span><br><span class="line">        <span class="built_in">deque</span>&lt;TreeNode*&gt; deq;</span><br><span class="line">        deq.push_back(root);</span><br><span class="line">        <span class="keyword">while</span>(!deq.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = deq.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* current = deq.front();</span><br><span class="line">                sum += current-&gt;val;</span><br><span class="line">                deq.pop_front();</span><br><span class="line">                <span class="keyword">if</span>(current-&gt;left) deq.push_back(current-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(current-&gt;right) deq.push_back(current-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            average.push_back(sum / <span class="built_in">size</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> average;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="653-两数之和Ⅳ-输入BST"><a href="#653-两数之和Ⅳ-输入BST" class="headerlink" title="653.两数之和Ⅳ-输入BST"></a>653.两数之和Ⅳ-输入BST</h1><h2 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>
<h2 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h2><p>中序遍历得到升序序列，双指针即可。BST可能有负数吗？</p>
<h2 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">findTarget</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">        helper(root, nums);</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> q = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p &lt; q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[p] + nums[q] &gt; k)</span><br><span class="line">                q--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[p] + nums[q] &lt; k)</span><br><span class="line">                p++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        helper(root-&gt;left, vec);</span><br><span class="line">        vec.push_back(root-&gt;val);</span><br><span class="line">        helper(root-&gt;right, vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="669-修建二叉搜索树"><a href="#669-修建二叉搜索树" class="headerlink" title="669.修建二叉搜索树"></a>669.修建二叉搜索树</h1><h2 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在[L, R]中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>
<h2 id="解题思路-16"><a href="#解题思路-16" class="headerlink" title="解题思路"></a>解题思路</h2><p>递归（不是遍历）</p>
<h2 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">trimBST</span><span class="params">(TreeNode* root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt; L)</span><br><span class="line">        &#123;   </span><br><span class="line">            root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">            root = trimBST(root-&gt;right, L, R);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &gt; R)</span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">            root = trimBST(root-&gt;left, L, R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;left = trimBST(root-&gt;left, L, R);</span><br><span class="line">            root-&gt;right = trimBST(root-&gt;right, L, R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="671-二叉树中第二小的节点"><a href="#671-二叉树中第二小的节点" class="headerlink" title="671.二叉树中第二小的节点"></a>671.二叉树中第二小的节点</h1><h2 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么这个节点的值不大于它的子节点的值。给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。</p>
<h2 id="解题思路-17"><a href="#解题思路-17" class="headerlink" title="解题思路"></a>解题思路</h2><h2 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h2><h1 id="687-最长同值路径"><a href="#687-最长同值路径" class="headerlink" title="687.最长同值路径"></a>687.最长同值路径</h1><h2 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。两个节点之间的路径长度由它们之间的边数表示。</p>
<h2 id="解题思路-18"><a href="#解题思路-18" class="headerlink" title="解题思路"></a>解题思路</h2><p>递归，计算每个节点的最长路径，更新最长路径。若该节点等于父节点，返回左子树或右子树中最长的路径，否则返回零。用于父节点计算最长的路径。</p>
<h2 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> max_set = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        helper(root, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> max_set - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = helper(root-&gt;left, root-&gt;val);</span><br><span class="line">        <span class="keyword">int</span> r = helper(root-&gt;right, root-&gt;val);</span><br><span class="line">        max_set = <span class="built_in">max</span>(l + r + <span class="number">1</span>, max_set);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val == val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(l, r) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="559-N叉树的最大深度"><a href="#559-N叉树的最大深度" class="headerlink" title="559.N叉树的最大深度"></a>559.N叉树的最大深度</h1><h2 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 N 叉树，找到其最大深度。</p>
<h2 id="解题思路-19"><a href="#解题思路-19" class="headerlink" title="解题思路"></a>解题思路</h2><p>和二叉树一样。N叉树节点的定义。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node*&gt; children;</span><br><span class="line"></span><br><span class="line">    Node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> _val) &#123;</span><br><span class="line">        val = _val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> _val, <span class="built_in">vector</span>&lt;Node*&gt; _children) &#123;</span><br><span class="line">        val = _val;</span><br><span class="line">        children = _children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Node* it : root-&gt;children)</span><br><span class="line">            depth = <span class="built_in">max</span>(depth, maxDepth(it));</span><br><span class="line">        <span class="keyword">return</span> depth + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="589-N叉树的前序遍历"><a href="#589-N叉树的前序遍历" class="headerlink" title="589.N叉树的前序遍历"></a>589.N叉树的前序遍历</h1><h2 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题目。</p>
<h2 id="解题思路-20"><a href="#解题思路-20" class="headerlink" title="解题思路"></a>解题思路</h2><p>下次用递归，迭代太占内存了。</p>
<h2 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorder(Node* root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        helper(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(Node* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        vec.push_back(root-&gt;val);</span><br><span class="line">        <span class="keyword">for</span>(Node* it : root-&gt;children)</span><br><span class="line">            helper(it, vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>Leetcode刷题笔记（链表）</title>
    <url>/2019/11/04/Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E9%93%BE%E8%A1%A8%EF%BC%89/</url>
    <content><![CDATA[<p>链表是一种常见的数据结构，是一种线性表。<a id="more"></a>但不是按照线性顺序存储，而是在每个节点存储下一个节点的指针，插入时复杂度O(1)，但访问需要O(n)，而且由于存储指针空间开销大。链表允许插入和移除任意节点，但不允许随机存储。链表有很多类型，例如单向链表、双向链表、循环链表。本代码实现采用的原则是实现最佳方法或者陌生方法，暴力法最后考虑（暴力法总会遇到且与题目匹配性最差）。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Definition <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24.两两交换链表中的节点"></a>24.两两交换链表中的节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。例如1-&gt;2-&gt;3-&gt;4变为2-&gt;1-&gt;4-&gt;3，奇数的话，最后一个不管。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>典型的递归问题。<br>{<br>        终止条件；<br>        自己调用自己；<br>        调用自己的返回值；<br>}<br>递归一般先在前两句循环，触发返回条件后，疯狂在后两句循环。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">![question_61](Hexosourceimages/question_61.PNGclass Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ListNode* swapPairs(ListNode* head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* mem1 = head-&gt;next;</span><br><span class="line">        ListNode* mem2 = head-&gt;next-&gt;next;</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = swapPairs(mem2);</span><br><span class="line">        <span class="keyword">return</span> mem1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="82-删除排序链表中的重复元素Ⅱ"><a href="#82-删除排序链表中的重复元素Ⅱ" class="headerlink" title="82.删除排序链表中的重复元素Ⅱ"></a>82.删除排序链表中的重复元素Ⅱ</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先想到还是暴力法，但总觉得事情没那么简单。下面代码的思想真是让我醍醐灌顶，不过他结尾写的有点问题，我补充了下。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode* slow = dummy;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast-&gt;next != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;val != fast-&gt;next-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(slow-&gt;next == fast)</span><br><span class="line">                    slow = fast;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    slow-&gt;next = fast-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(slow-&gt;next-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">            slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141.环形链表"></a>141.环形链表</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表，判断链表中是否有环。为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>哈希表法、快慢指针法。双指针法关键是判断”慢指针能否追上快指针“。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><p>双指针法：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode* slow = head-&gt;next;</span><br><span class="line">        ListNode* fast = head-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">                <span class="keyword">if</span>(fast == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(fast == slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>反转一个单链表。</p>
<h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>递归法。递归法太NB了。</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><p>递归法：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* p = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="92-反转链表Ⅱ"><a href="#92-反转链表Ⅱ" class="headerlink" title="92.反转链表Ⅱ"></a>92.反转链表Ⅱ</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转</p>
<h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>原地暴力法。迭代法很华丽看不懂，但我觉得舍本逐末了，程序的本意是华丽的简单，这也是迭代的初衷。</p>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode* pre = dummy;</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = pre-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m - <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* temp1 = pre-&gt;next;</span><br><span class="line">            ListNode* temp2 = cur-&gt;next-&gt;next;</span><br><span class="line">            pre-&gt;next = cur-&gt;next;</span><br><span class="line">            pre-&gt;next-&gt;next = temp1;</span><br><span class="line">            cur-&gt;next = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">        head = dummy-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummy;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234.回文链表"></a>234.回文链表</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>判断一个链表是否为回文链表。你能否用时间复杂度O(n)和空间复杂度O(1)解决问题。</p>
<h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>快慢指针法找到位置进行比较，头插法构建反向链表。奇偶判断的思想真是漂亮，完成了复杂度要求。这个回文链表是反转链表的进化。</p>
<h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* pre = head;</span><br><span class="line">        ListNode* prepre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = slow;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            pre-&gt;next = prepre;</span><br><span class="line">            prepre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast != <span class="literal">nullptr</span>)</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(slow != <span class="literal">nullptr</span> &amp;&amp; pre != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(slow-&gt;val != pre-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="109-有序链表转换二叉搜索树"><a href="#109-有序链表转换二叉搜索树" class="headerlink" title="109.有序链表转换二叉搜索树"></a>109.有序链表转换二叉搜索树</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>
<h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>完全没做过树的问题..懵。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
</search>

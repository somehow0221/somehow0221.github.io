<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Qt学习（dialog）</title>
    <url>/2020/01/08/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88dialog%EF%BC%89/</url>
    <content><![CDATA[<p>QWidget继承自QObject和QPaintDevice，QDialog和QWindow继承自QWidget  </p><p>QWidget类成员函数setWindowFlags()，用来设置窗口的属性。Qt::WindowFlags具体有：</p><ul>
<li>Qt::Widget</li>
<li>Qt::Window</li>
<li>Qt::Dialog</li>
<li>Qt::Popup， 是一个弹出的模态顶级窗口</li>
<li>Qt::Tool， 工具窗口</li>
<li>Qt::ToolTip，工具提示窗口</li>
<li>Qt::SplashScreen，启动界面</li>
<li>Qt::Desktop，桌面类型</li>
<li>Qt::SubWindow，子窗口</li>
<li>Qt::ForeignWindow</li>
<li>Qt::CoverWindow覆盖窗口  </li>
</ul><a id="more"></a>


<p>还包括一些修饰：</p>
<ul>
<li>Qt::CustomizeWindowHint，关闭默认的窗口提示</li>
<li>Qt::WindowTitleHint，给窗口添加标题栏</li>
<li>Qt::WindowSystemMenuHint，给窗口添加系统菜单</li>
<li>Qt::WindowMinimizeButtonHint，添加最小化按钮</li>
<li>Qt::WindowMaximizeButtonHint，添加最大化按钮</li>
<li>Qt::WindowMinMaxButtonHint，都添加</li>
<li>Qt::WindowContextHelpButtonHint，添加帮助按钮（问号）</li>
<li>Qt::BypassGraphicsProxyWidget</li>
<li>Qt::WindowShadeButtonHint，shade button?</li>
<li>Qt::WindowStaysOnTopHint，在上面</li>
<li>WindowStaysOnBottomHint，在下面</li>
</ul>
<p>还包括一些功能上的限制：</p>
<ul>
<li>Qt::WindowTransparentForInput，窗口只能输出，不接受输入</li>
<li>Qt::WindowOverridesSystemGestures</li>
<li>Qt::WindowDoesNotAcceptFocus，不接受输入焦点</li>
<li>Qt::MaximizeUsingFullscreenGeometryHint</li>
<li>Qt::WindowType_Mask</li>
</ul>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习（const）</title>
    <url>/2020/01/07/C++%E5%AD%A6%E4%B9%A0%EF%BC%88const%EF%BC%89/</url>
    <content><![CDATA[<h4 id="const修饰变量"><a href="#const修饰变量" class="headerlink" title="const修饰变量"></a>const修饰变量</h4><p>const修饰变量，表示不可更改。可用于定义常量，还可以用#define定义常量，但是前者有很多优点：</p><ul>
<li>编译器处理方式不同<ul>
<li>define是在预处理阶段展开（预处理器）。</li>
<li>const是编译运行阶段使用（编译器）。</li>
<li>代码-&gt;预处理器-&gt;编译器-&gt;汇编器-&gt;连接器-&gt;可执行文件。</li>
</ul>
</li>
<li>类型和安全检查不同<ul>
<li>define没有类型，不做安全检查。</li>
<li>const相反。</li>
</ul>
</li>
<li>存储方式不同<ul>
<li>define不分配内存，哪里使用在哪里展开，内存中不存储它。</li>
<li>const常量在内存中只分配一次，节省内存。</li>
</ul>
</li>
<li>作用域不同<ul>
<li>define是全局的</li>
<li>const修饰成员变量，需要注意的是：<ul>
<li>在类内不能初始化，因为头文件中类的定义只是一个声明，无法真正分配空间。</li>
<li>const定义后，就不能再赋值了</li>
<li>解决方案是，（1）用初始化列表初始化；（2）将变量同时声明为static类型。<h4 id="const修饰指针变量"><a href="#const修饰指针变量" class="headerlink" title="const修饰指针变量"></a>const修饰指针变量</h4>有三种情况：</li>
</ul>
</li>
</ul>
</li>
<li>修饰指针指向的内容，指针内容不可变，指针指向可变。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">27</span>;</span><br><span class="line">p = &amp;b;<span class="comment">//is it corrrect?</span></span><br><span class="line">*p = <span class="number">7</span>;<span class="comment">//wrong</span></span><br></pre></td></tr></table></figure></li>
<li>修饰指针，指针不能指向其他地址，但内容可变。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p = <span class="number">27</span>;</span><br><span class="line">*p = <span class="number">7</span>;<span class="comment">//correct</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">7</span>;</span><br><span class="line">p = &amp;b;<span class="comment">//wrong</span></span><br></pre></td></tr></table></figure></li>
<li>两者皆有之。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure>
<h4 id="修饰参数"><a href="#修饰参数" class="headerlink" title="修饰参数"></a>修饰参数</h4>通常传递参数利用传值方式传递，函数内会构造一个参数副本。但是遇到数据量较大或者是自定义类型的时候，可以用传址方式传递（指针和引用），但是存在参数在函数内被改变的风险，因此需要用const修饰。<h4 id="修饰返回值"><a href="#修饰返回值" class="headerlink" title="修饰返回值"></a>修饰返回值</h4>返回值传递的方式有很多，包括按值返回、按引用返回、按指针返回…<br>当按指针和引用返回时，可以用const修饰以防止在函数外面被修改。<h4 id="修饰函数"><a href="#修饰函数" class="headerlink" title="修饰函数"></a>修饰函数</h4>非静态成员函数后可以用const修饰，表示隐含传入成员函数的this指针是const指针（应该是指向的内容是const的吧？），修改它所在的类的成员的操作是不允许的，唯一例外是mutable修饰的成员。加了const修饰的成员函数可以被非const对象和const对象调用，但不加const的成员函数，只能被非const对象调用。</li>
</ul>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt学习（sender）</title>
    <url>/2020/01/07/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88sender%EF%BC%89/</url>
    <content><![CDATA[<p>帮助文档定义：<br><img src="/2020/01/07/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88sender%EF%BC%89/%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.PNG" alt="帮助文档">  </p><p>返回一个QObject类型的指针指向发送信号的QObject对象或其子类对象，该指针只在调用相应的slot函数时有效。</p><ul>
<li>当connect连接被断开无效</li>
<li>发送放被销毁无效</li>
<li>不同线程之间的connect无效</li>
</ul><p>类型转换<br>由于返回的是QObject指针，若要使用对应的子类接口的话，需要利用<strong>qobject_cast&lt;&gt;()</strong>进行类型转换。  </p><a id="more"></a>



<p>qobject_cast<a>(A)，A是一个QObject类型的对象，可以将其转为QObject的子类对象，与C++中的dynamic_cast&lt;&gt;()类似。</a></p>
<p>举例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> TpColorCompositionPanel::onBtnEnableImage(<span class="keyword">bool</span> isEnable)</span><br><span class="line">&#123;</span><br><span class="line">    QCheckBox* itm = qobject_cast&lt;QCheckBox*&gt;(sender());</span><br><span class="line">    QRect <span class="built_in">rect</span> = itm-&gt;parentWidget()-&gt;frameGeometry();</span><br><span class="line">    QModelIndex modelIndex = m_table-&gt;indexAt(QPoint(<span class="built_in">rect</span>.center()));</span><br><span class="line">    m_list_table[modelIndex.row()].enable = isEnable;</span><br><span class="line">    calculateBackgroundImage();</span><br><span class="line">    dyeAndMixImage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习（STL）</title>
    <url>/2019/12/30/C++%E5%AD%A6%E4%B9%A0%EF%BC%88STL%EF%BC%89/</url>
    <content><![CDATA[<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>set的值就是key，所有不允许有重复的值，且值按顺序排列。</p><h2 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>与set基本一致，不同是允许重复值。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>map是键值对，允许重复。</p>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt学习（坐标）</title>
    <url>/2019/12/30/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9D%90%E6%A0%87%EF%BC%89/</url>
    <content><![CDATA[<h3 id="坐标转换函数"><a href="#坐标转换函数" class="headerlink" title="坐标转换函数"></a>坐标转换函数</h3><p>坐标转换的原则是，在转换后的坐标系上按新坐标显示的话，显示位置不变</p>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回相对子窗口的坐标</span></span><br><span class="line">QPoint QMouseEvent::pos();</span><br><span class="line"><span class="comment">//返回相对屏幕的坐标</span></span><br><span class="line">QPoint QMouseEvent::globalPos();</span><br><span class="line"><span class="comment">//返回相对屏幕的坐标</span></span><br><span class="line">QPoint QCursor::pos(<span class="keyword">const</span> QScreen* screen);</span><br><span class="line"><span class="comment">//获得子控件在父控件中的位置</span></span><br><span class="line">QPoint QWidget::pos();</span><br><span class="line"><span class="comment">//子窗口坐标转换为父窗口坐标</span></span><br><span class="line">QPoint QWidget::mapToParent(<span class="keyword">const</span> QPoint&amp; pos);</span><br><span class="line"><span class="comment">//父窗口坐标转换为子窗口坐标</span></span><br><span class="line">QPoint QWidget::mapFromParent(<span class="keyword">const</span> QPoint&amp; pos);</span><br><span class="line"><span class="comment">//窗口坐标转换为屏幕坐标</span></span><br><span class="line">QPoint QWidget::mapToGlobal(<span class="keyword">const</span> QPoint&amp; pos);</span><br><span class="line"><span class="comment">//屏幕坐标转换为窗口坐标</span></span><br><span class="line">QPoint QWidget::mapFromGlobal(<span class="keyword">const</span> QPoint&amp; pos);</span><br><span class="line"><span class="comment">//转换到指定的窗口</span></span><br><span class="line">QPoint QWidget::mapTo(<span class="keyword">const</span> QWidget * parent, <span class="keyword">const</span> QPoint &amp;pos) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt学习（事件）</title>
    <url>/2019/12/30/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8B%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<h3 id="窗口最大化、最小化事件"><a href="#窗口最大化、最小化事件" class="headerlink" title="窗口最大化、最小化事件"></a>窗口最大化、最小化事件</h3><p>主要靠changeEvent事件函数和event-&gt;type来判断。</p>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeEvent</span><span class="params">(QEvent * event)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MainWindow::changeEvent(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() != QEvent::WindowStateChange)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt学习（model/view）</title>
    <url>/2019/12/30/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88model-view%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt学习（路径）</title>
    <url>/2019/12/09/Qt%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%B7%AF%E5%BE%84%EF%BC%89/</url>
    <content><![CDATA[<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>一个程序所带有的资源文件、数据或配置文件一般放在三个地方——分别是用户中创建的文件夹、注册表和.exe文件的目录下。<a id="more"></a>在颜色合成项目中编辑染料库时，需要知道染料库文件的路径才能打开染料库文件。原采用的方法是利用绝对路径，现修改为相对.exe文件的路径。</p>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>Qt中绝对路径可以用双斜杠表示。</p>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>Qt中相对路径表示一般是将文件放在.exe文件目录下，获得可执行文件目录后再加上文件名就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(QString fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> path = QCoreApplication::applicationDirPath().toStdString();</span><br><span class="line">	path = path + <span class="string">'/'</span> + fileName.toStdString();</span><br><span class="line">	fstream readFile.<span class="built_in">open</span>(path, ios::in);</span><br><span class="line">	<span class="keyword">if</span>(!readFile.is_open())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外还有一些其他函数，例如获取可执行文件绝对路径。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> path = QCoreApplication::applicationFilePath().toStdString();</span><br></pre></td></tr></table></figure>
<p>获取当前工作目录的绝对路径。这个还有待测试一下确定当前工作目录是什么。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> path = QDir::currentPath().toStdString();</span><br></pre></td></tr></table></figure>
<h3 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h3><p>Qt还可以添加资源文件，资源文件是以机器语言的形式存储到可执行文件中的。<br>例如<em>:/icon/png/delete_hover.png</em>。<br><em>:/</em>表示对qrc资源文件的引用。</p>
<h2 id="滑动条"><a href="#滑动条" class="headerlink" title="滑动条"></a>滑动条</h2>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>颜色合成调研</title>
    <url>/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h1 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h1><h2 id="荧光显微镜"><a href="#荧光显微镜" class="headerlink" title="荧光显微镜"></a>荧光显微镜</h2><p>荧光显微镜是指用荧光来产生一个图像的任何显微镜。对光源要求使用近乎单色光照明。<br>一个样本被两个荧光团标记，通过设置激发波片可以切换两个荧光团的激发波长。<a id="more"></a>每个荧光团发射波长也是确定的，可以通过确定的波片滤出来。滤出来的两幅图像就是这个样本不同结构的图像，这时候往往要染色，因为直接叠加的话就和传统光学显微镜一样，灰度域难以分辨，荧光没意义了。因此要染色，不是真彩色而是赋予这个结构这个颜色，也往往不用对应发射波长的颜色，因为没必要，发射波长的颜色也不是它真的颜色，就算是真的颜色也可以改，我们要的是”清晰“。那么得到了几个灰度图像了，怎么染色，怎么合成。</p>
<p>染色是为了从颜色上区别。但是融合却要根据初始的图像信息取融合，这里不用RGB空间，用HIS空间或者其他是不是更好，融合时比较的原始的I图像，但是实际加上的像素是彩色的。RGB空间有没有问题我不知道…难点出来了，怎么样取颜色合成？？？？？</p>
<h2 id="落射式荧光显微镜"><a href="#落射式荧光显微镜" class="headerlink" title="落射式荧光显微镜"></a>落射式荧光显微镜</h2><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/落射式.png" alt="落射式.png" style="zoom:50%;">
## 共聚焦荧光显微镜
*从一个点光源发射的探测光通过透镜聚焦到被观测物体上，如果物体恰在焦点上，那么反射光通过原透镜应当汇聚回到光源，这就是所谓的共聚焦，简称共焦。共焦显微镜在反射光的光路上加上了一块半反半透镜（dichroic mirror），将已经通过透镜的反射光折向其它方向，在其焦点上有一个带有“针孔”（Pinhole），小孔就位于焦点处，挡板后面是一个光电倍增管（photomultiplier tube，PMT）。可以想像，探测光焦点前后的反射光通过这一套共焦系统，必不能聚焦到小孔上，会被挡板挡住。于是光度计测量的就是焦点处的反射光强度。其意义是：通过移动透镜系统可以对一个半透明的物体进行三维扫描。*  
——维基百科

<h2 id="超分辨荧光显微镜"><a href="#超分辨荧光显微镜" class="headerlink" title="超分辨荧光显微镜"></a>超分辨荧光显微镜</h2><h2 id="全内反射荧光显微镜"><a href="#全内反射荧光显微镜" class="headerlink" title="全内反射荧光显微镜"></a>全内反射荧光显微镜</h2><h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>按层次分为像素级、特征级和决策级的融合。像素级融合包括频域和空域上的处理，相比其他两种层级的融合方法需要更大的计算量，但包含的信息更足。目前像素级的融合方法很多，特征级的融合方法随着CNN发展也多了起来。像素级融合方法有基于空域、频域和色彩空间的方法。</p>
<p>经典的频域方法有：金字塔、小波。<br>处理的流程一般是：</p>
<ul>
<li>对待核成图像进行变换。</li>
<li>根据低频高频分别设定不同的融合规则。</li>
<li>反变换得到融合图像。</li>
</ul>
<p>常用的基于色彩空间融合的算法根据具体功能和计算效率选择不同的色彩模型，色彩模型有RGB、HSV、YUV等。</p>
<h2 id="运用图像处理软件将同视野两种单标记免疫荧光图像合成为双标记图像的方法研究-2005"><a href="#运用图像处理软件将同视野两种单标记免疫荧光图像合成为双标记图像的方法研究-2005" class="headerlink" title="运用图像处理软件将同视野两种单标记免疫荧光图像合成为双标记图像的方法研究[2005]"></a>运用图像处理软件将同视野两种单标记免疫荧光图像合成为双标记图像的方法研究[2005]</h2><p>单标记是对一个样本进行标记，多标记是对一个样本多个标记。可否对一个样本进行多次单标记？？？这样就可以用两张单标记合成多标记了。但是应该不行，因此采用多标记滤色的方法可得到两张不同标记的图像再对其进行合成获得好效果。无论是落射式或者共聚焦式的显微镜都是如此。</p>
<h2 id="电子内窥镜实时图像处理系统-2019"><a href="#电子内窥镜实时图像处理系统-2019" class="headerlink" title="电子内窥镜实时图像处理系统[2019]"></a>电子内窥镜实时图像处理系统[2019]</h2><p>电子内窥镜针对荧光分子程序有两种方法。双传感器方案和单传感器方案，双传感器方案优势是同时获得两个波段的图像，但是缺点是图像有位置的偏差，这点对于图像融合很有影响。作者采用的是单传感器分时采集不同波段图像的方法。尽管损失了部分的时间和信息量，但目前的输出帧率足够应付。</p>
<p>文章在国内外研究现状中写到荧光显微镜系统有单传感器和多传感器两种，两种都有研究。<br>本文使用的是色彩空间融合算法，色彩空间融合在处理速度和内存占用上优于多分辨率融合。</p>
<h2 id="基于不同色彩空间融合的快速图像增强算法-2014"><a href="#基于不同色彩空间融合的快速图像增强算法-2014" class="headerlink" title="基于不同色彩空间融合的快速图像增强算法[2014]"></a>基于不同色彩空间融合的快速图像增强算法[2014]</h2><p>Retinex算法存在色彩失真、噪声放大和光晕伪影的问题。<br>本文提出了一种改进算法，</p>
<h1 id="软件调研"><a href="#软件调研" class="headerlink" title="软件调研"></a>软件调研</h1><p>本文将按颜色合成的子功能对ToupView\ImagePro10\ImageProPlus6.0三款软件进行比较分析，并阐述我们实现对该子功能的实现情况。<!--more-->由于ImageProPlus6.0与ToupView的颜色合成程序几乎一致，大多数比较的是ToupView与ImagePro10的差异。</p>
<p>我将颜色合成功能划分为以下子功能：添加图片、删除图片、隐藏图片、染色、编辑染料库、位置调节、直方图拉伸、图像参数调节（亮度、对比度、gamma值）、设定背景图片、重置程序。</p>
<h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><h3 id="添加图片方式"><a href="#添加图片方式" class="headerlink" title="添加图片方式"></a>添加图片方式</h3><p>三款软件添加图片功能如下图所示。比较得到ImageProPlus6.0和ToupView采用<strong>切换QCombobox+QButton</strong>的方法添加，而ImagePro10采用<strong>切换QCombobox</strong>方式添加，并且具有<strong>Add All</strong>的功能。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImageProPlus6.0主窗口.png" alt="ImageProPlus6.0主窗口.png" style="zoom: 50%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ToupView主窗口.png" alt="ToupView主窗口.png" style="zoom: 50%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10主窗口.jpg" alt="ImagePro10主窗口.jpg" style="zoom:50%;"></p>
<h3 id="添加图片染色"><a href="#添加图片染色" class="headerlink" title="添加图片染色"></a>添加图片染色</h3><p>另外需要注意的是新加入图片的染料设定问题。ToupView和ImageProPlus6.0采用的是加入前弹出染色窗口供用户决定染料，而ImagePro10却直接按红绿蓝青黄品的顺序对图片进行<strong>自动染色</strong>。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImageProPlus6.0染色窗口.png" alt="ImageProPlus6.0染色窗口" style="zoom: 67%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ToupView染色窗口.png" alt="ToupView染色窗口" style="zoom:50%;"> </p>
<p>两种染色方式都有欠妥的地方，ToupView和ImageProPlus问题在于使用户在看不到整体合成效果的情况下进行染料选择，有可能会造成无效操作；ImagePro10的染色方式受到图片顺序和数目的限制。因此我们决定采用保守方法处理这个问题，即用户新加入的图片暂不染色保持Original状态。</p>
<h3 id="设定背景图片"><a href="#设定背景图片" class="headerlink" title="设定背景图片"></a>设定背景图片</h3><p>ImageProPlus6.0就有将图片设为背景图片的功能，ImagePro10将其保留下来并没有做出修改。而ToupView虽然也加入了这个功能，但表现与前两者差别很大。利用ImageProPlus6.0颜色合成测试图片测试。下图第一行是ToupView无背景模式和将绿色通道置为背景模式的情况，第二行是ImagePro10无背景模式和将绿色通道置为背景模式的情况。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ToupView%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87_%E6%97%A0.jpg" alt="ToupView背景图片_无.jpg"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ToupView%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87_%E6%9C%89.jpg" alt="ToupView背景图片_有.jpg">   </p>
<p><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro%E7%B3%BB%E5%88%97%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87_%E6%97%A0.jpg" alt="ImagePro系列背景图片_无.jpg"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro%E7%B3%BB%E5%88%97%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87_%E6%9C%89.jpg" alt="ImagePro系列背景图片_有.jpg"> </p>
<p>分析结果。首先观测ToupView的对比度发现，ToupView将绿色通道设为背景后仅仅将其染为白色。而ImageProPlus10将绿色通道置为背景后突出了红色和蓝色通道的内容。因此ImageProPlus6.0对“设为背景图片”的操作理解的更为正确。</p>
<p>接下来对ImageProPlus6.0结果进行分析。下图分别是绿色通道和红蓝通道的原图和绿色通道置为背景后的结果图。设定绿色通道为背景图像后结果表现为绿色通道填充红色和蓝色通道背景的效果。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro系列背景图片_G.jpg" alt="ImagePro系列背景图片_G.jpg" style="zoom: 67%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro系列背景图片_RB.jpg" alt="ImagePro系列背景图片_RB.jpg" style="zoom:67%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro系列背景图片_有.jpg" alt="ImagePro系列背景图片_有.jpg" style="zoom:67%;"> </p>
<p>接下来考虑如何实现ImagePro10同样的效果。主要有两条思路，一是改变融合方式，二是利用图像分割提取红蓝图像的前景图像。以上两点可以通过用不同亮度的绿色图像进行试验。</p>
<p>红蓝通道为零的部分用绿通道填充。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat pic_orig = imread(<span class="string">"C:\\Users\\ThinkPad\\Desktop\\Composite_1.jpg"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pic_orig.rows; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pic_orig.cols; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">0</span>] + pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">2</span>] != <span class="number">0</span></span><br><span class="line">            &#123;</span><br><span class="line">                pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    imwrite(<span class="string">"C:\\Users\\ThinkPad\\Desktop\\result_1.jpg"</span>, pic_orig);</span><br><span class="line">    waitKey(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/result_1.jpg" alt="result_1.jpg"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro%E7%B3%BB%E5%88%97%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87_%E6%9C%89.jpg" alt="ImagePro系列背景图片_有.jpg"> </p>
<p>红蓝通道为小于绿通道的部分用绿通道填充，结果接近。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat pic_orig = imread(<span class="string">"C:\\Users\\ThinkPad\\Desktop\\Composite_1.jpg"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pic_orig.rows; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pic_orig.cols; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">0</span>] + pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">2</span>] </span><br><span class="line">                &gt; pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                pic_orig.ptr&lt;Vec3b&gt;(i)[j][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    imwrite(<span class="string">"C:\\Users\\ThinkPad\\Desktop\\result_1.jpg"</span>, pic_orig);</span><br><span class="line">    waitKey(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/result_2.jpg" alt="result_2.jpg"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro%E7%B3%BB%E5%88%97%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87_%E6%9C%89.jpg" alt="ImagePro系列背景图片_有.jpg"></p>
<h2 id="删除图片"><a href="#删除图片" class="headerlink" title="删除图片"></a>删除图片</h2><p>三款软件删除图片功能如下图所示。比较得到ImageProPlus6.0和ToupView采用<strong>选中图片+QButton</strong>的方法删除，而ImagePro10采用<strong>为每张图片配备删除Button</strong>方式删除。</p>
<p>分析得到ImagePro10的删除方式更优。用户操作更加方便，体现了ImagePro10<strong>去繁琐化</strong>和<strong>扁平化</strong>的设计理念，这种理念在后续比较中也不断闪现。因此我们选择的是ImagePro10的删除方式。</p>
<h2 id="隐藏图片"><a href="#隐藏图片" class="headerlink" title="隐藏图片"></a>隐藏图片</h2><p>三款软件隐藏图片功能如下图所示。比较得到三者都采用<strong>为每张图片配备删除Button</strong>方式隐藏图片。但是ImagePro10还增加了<strong>闪烁</strong>模式，并提供了接口调节闪烁频率。</p>
<p>分析闪烁功能。当多张图像闪烁时，闪烁图像均以相同的频率闪烁。删除和添加新图像时闪烁功能不变。调节未闪烁图像包括位置、亮度、对比度、gamma值等参数以及进行染色和直方图调节时闪烁功能不变。但是当进行最佳适配、重置等功能时，闪烁关闭跳转到正常显示。调节闪烁图片时唯一不同是调节亮度、对比度、gamma值等参数时闪烁功能关闭跳转到正常显示，表现出ImagePro10的闪烁功能主要用来下述情况——用户调整未闪烁的图像，并通过其他图像的闪烁观测正在调节的效果和合成的效果。</p>
<p>分析得到闪烁的目的是为了方便用户调节图片时既能看到正在调整的图片又可以看到融合后的效果。是有意义的功能待后续加入。</p>
<h2 id="染色功能"><a href="#染色功能" class="headerlink" title="染色功能"></a>染色功能</h2><p>染色功能是颜色合成中重要的一部分，三款软件都有些不同的地方。</p>
<p>ImageProPlus6.0和ToupView的界面如下图所示。ImageProPlus6.0和ToupView还是属于要素全面、等级分明的风格。允许用户选择预设染料、直接在染料库中选择染料、通过颜色选择染料且为用户提供了当前和所选染的RGB信息。但使用时发现ImageProPlus6.0在调节QSlider和按下按钮时QCombobox显示的染料没有对应变化，这是一个不足ToupView中已经改变。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImageProPlus6.0染色窗口.png" alt="ImageProPlus6.0染色窗口" style="zoom: 67%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ToupView染色窗口.png" alt="ToupView染色窗口" style="zoom:50%;"> </p>
<p>ImagePro10界面如下图所示。ImagePro10染色功能属于不同风格，是对它原始版本的优化。抛弃了“选中+按钮”进行唤出的模式转而为每张图片添加了一个唤出按钮。ImagePro10窗口如下图所示，首先用户可以在QCombobox中选择两种模式，自定义模式和选择从染料库中添加进来的常用染料。从窗口中看到自定义模式下，用户调整波长和颜色，调整波长时颜色会按照相应函数做出改变。而调整颜色时，波长不变。这样做的好处是不仅给用户提供了波长-颜色的对应基准还允许用户自由调节。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10染色窗口.jpg" alt="ImagePro10染色窗口" style="zoom: 50%;"></p>
<p>添加染料库中染料和编辑染料库功能可以通过点击齿轮图标唤出染料库窗口，如下图所示。用户选中QCheckBox就可以添加常用染料。编辑染料库功能后面进行比较。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10染料列表.jpg" alt="ImagePro10染料列表" style="zoom:67%;"></p>
<p>分析三款软件的染色功能。三款软件的染色功能主要是两种风格，比较图如下图所示。通过流程图可以强烈感受到ImagePro10设计中追求灵活和扁平化的想法。但通过和师兄讨论得到二者在伯仲之间，只是设计思想不同。博采众长采用了ToupView的主体思路，结合了ImagePro10的按波长索引染料和为每张图添加唤出按钮的想法。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/染色流程图.jpg" alt="test" style="zoom: 67%;"></p>
<h2 id="编辑染料库功能"><a href="#编辑染料库功能" class="headerlink" title="编辑染料库功能"></a>编辑染料库功能</h2><p>虽然三款软件选择染料的思想不同，但对染料库的编辑却大同小异。三者都包括了新建、删除、重置、保存修改、取消修改的功能。</p>
<p>ToupView界面如下图所示。允许用户保存或取消对当前染料的修改，允许用户对当前参数保存并重命名为新染料、允许用户删除当前染料、允许用户重新加载染料库。但是二者对染料库的修改都不得在颜色合成过程中进行。二者在新建染料时允许用户调节QSlider进行选择，但是一条颜色轴并未将所有颜色表示出来，其余的颜色用户可以点击显示颜色的按钮唤出系统自带的Color Dialog选择。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImageProPlus6.0编辑染料库窗口.png" alt="ImageProPlus6.0编辑染料库窗口.png" style="zoom:50%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/Toupview编辑染料库窗口.png" alt="Toupview编辑染料库窗口.png" style="zoom:50%;"></p>
<p>ImagePro10界面如下图所示。尽管ImagePro10编辑染料库还是这些功能，但表现的方式却不同。如下图所示ImagePro10并未通过切换的方式而是将所有的染料展示出来。另外由于允许用户一边染色一边修改染料，ImagePro10设计了一套逻辑来修改被当前染料染色的图片——当前染料被修改时，图片相应改变；当前染料被删除时，图片染色参数不变染料变为自定义模式。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10染料列表.jpg" alt="ImagePro10染料列表" style="zoom:67%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10%E6%96%B0%E5%BB%BA%E6%9F%93%E6%96%99%E7%AA%97%E5%8F%A3.jpg" alt="ImagePro10新建染料窗口"></p>
<p>ImagePro10新建染料时允许用户自由选择颜色，没有任何限制。有以下两种选择方式，如下图所示。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10新建染料选择颜色窗口_1.jpg" alt="ImagePro10新建染料选择颜色窗口_1.jpg" style="zoom:50%;"><br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10新建染料选择颜色窗口_2.jpg" alt="ImagePro10新建染料选择颜色窗口_2.jpg" style="zoom:50%;"></p>
<p>分析三款软件在编辑染料库功能上的设置。首先明确允许用户一边染色一边修改染料的原则。但由于我们未选择ImagePro10带有的自定义染色模式，这里对ImagePro染料库改变后的逻辑关系稍作修改，当图片染料被删除时会到不染色状态。另外关于新建染料颜色的选择方面，这里准备了RGB三条QSlider供用户调节。</p>
<h2 id="位置调节功能"><a href="#位置调节功能" class="headerlink" title="位置调节功能"></a>位置调节功能</h2><p>位置调节功能允许用户通过按钮对选中图像进行移动，来进行多层次的观察。这方面三款软件几乎一致，唯一不同之处在于ImagePro10抛弃了对全通道调节位置的功能。</p>
<p>分析得到ImagePro10出于功能去繁琐化的思想取消该功能是合理的，出于功能方面的考虑当图片没有相对移动时，进行位置移动是无意义的。我们目前还未取消这个功能。</p>
<h2 id="图像参数调节功能"><a href="#图像参数调节功能" class="headerlink" title="图像参数调节功能"></a>图像参数调节功能</h2><p>以下所有的图像参数调节功能都是对选中图片进行调节，可以选择单张图片或者所有图片。</p>
<h3 id="直方图拉伸"><a href="#直方图拉伸" class="headerlink" title="直方图拉伸"></a>直方图拉伸</h3><p>直方图拉伸是ImagePro10独有的调节对比度的方式，ImagePro10通过显示图像直方图，可以通过直方图映射的方式调节对比度也可以通过直方图更直观地调整亮度、对比度、gamma值等参数。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10直方图拉伸_1.jpg" alt="ImagePro10直方图拉伸_1.jpg"> </p>
<p>通过后续分析得到直方图映射实际也是最佳对比度调节的方法。未添加直方图显示的 功能，直方图映射通过后续的最佳对比度来实现。</p>
<h3 id="亮度对比度gamma参数"><a href="#亮度对比度gamma参数" class="headerlink" title="亮度对比度gamma参数"></a>亮度对比度gamma参数</h3><p>图像参数包括亮度、对比度、gamma值。单单靠染色进行合成往往无法达到满意的效果，调节图像参数的主要目的主要是使合成的图片更清晰。这点三款软件的功能无差别。<br><img src="/2019/11/22/%E9%A2%9C%E8%89%B2%E5%90%88%E6%88%90%E8%B0%83%E7%A0%94/ImagePro10直方图拉伸_1.jpg" alt="ImagePro10直方图拉伸_1.jpg"> </p>
<p>ImagePro10为我们提供了直方图映射关系，正因为这些关系函数我们实现了自己的图像参数调节功能，亮度、对比度、gamma公式依次是：<br>$$<br>pix_out=pix_in+255<em>index_b<br>$$<br>$$<br>pix_out=255/((255-254</em>index_c))<em>（pix_in-127</em>index_c）<br>$$<br>$$<br>pix_out= ((pix_in)/255)^(index_g)*255<br>$$</p>
<h2 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h2><p>ToupView和ImageProPlus6.0添加了Reset功能，即利用当前图像的原始图像重新开始颜色合成程序。</p>
<p>Reset功能在实际使用中还是能起到一定方便的作用，因此我们也有添加。</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>Color Comporsite</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解计算机系统（计算机系统漫游）</title>
    <url>/2019/11/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%EF%BC%88%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="文本文件和二进制文件"><a href="#文本文件和二进制文件" class="headerlink" title="文本文件和二进制文件"></a>文本文件和二进制文件</h2><p>文本文件是指每个字符用ASCⅡ码表示的文件，这里的ASCⅡ码是0-255的整数，刚好是一个字节；二进制文件就是将文本文件中的每个ASCⅡ码用一个字节的二进制表示。<a id="more"></a></p>
<h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>.c文件-&gt;<em>预处理器</em>-&gt;.i文件-&gt;<em>编译器</em>-&gt;.s文件-&gt;<em>汇编器</em>-&gt;.o文件-&gt;<em>链接器</em>-&gt;可执行目标程序。 </p>
<ul>
<li>预处理器：将头文件融入.c文件中</li>
<li>编译器：变成汇编语言</li>
<li>汇编器：变成机器语言（由文本文件转为了二进制文件）</li>
<li>连接器：将预编译好的机器语言结合进来（如printf函数）</li>
</ul>
<p>生成好的可执行目标程序即为处理器可直接解释的二进制文件，存储在内存当中。</p>
<h2 id="处理器读取解释指令"><a href="#处理器读取解释指令" class="headerlink" title="处理器读取解释指令"></a>处理器读取解释指令</h2><h3 id="计算机硬件组成"><a href="#计算机硬件组成" class="headerlink" title="计算机硬件组成"></a>计算机硬件组成</h3><p>可以看到有三条总线分别是：I/O总线、内存总线、系统总线。总线的传输单位是32位或64位。也就是说计算机分为三大部分：输入输出设备（键鼠\屏幕\硬盘\网络）、内存、处理器。</p>
<h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p>处理器处理过程实际很复杂，简单进行抽象称之为“指令集架构”。处理器由三部分构成：程序计数器(PC)、寄存器文件和算数逻辑单元(ALU)。程序计数器实质是一个字大小的寄存器，每次指向下一步指令所在的内存地址；寄存器文件通过该地址读取数据执行指令，然后更新PC；执行指令用到的逻辑运算借由ALU实现。</p>
<h3 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h3><p>系统从内存中读取指令又将执行结果输出到屏幕上，这个过程存在大量的复制操作。又由于不同硬件设备的读取效率差距很大，因此位保证程序执行过程的顺畅，需要借助高速缓存。</p>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>在上述执行程序的过程中，很多过程实际是借由操作系统完成的，操作系统是软件和硬件之间的桥梁。主要起到两个作用，一是防止硬件被失控的应用程序滥用；二是帮助应用程序控制硬件设备，操作系统通过两个抽象的概念实现这两个功能。</p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程是操作系统对运行一个程序的一种抽象，系统可同时运行多个 进程。但这实际是一种假象，是通过在不同进程之间切换达到的（单处理器）。</p>
<p>对多处理器分为多核和超线程两方面实现。多核即多个CPU集成，能同时执行多个进程；超线程技术是指缩短了处理器在不同进程之间切换的频率。多处理器的出现一方面减少了处理多进程时并发的需要（多核），另一方面对多线程编写的程序来说可以被执行的更快（多核和超线程）。</p>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程是组成进程的执行单元。</p>
<h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>系统为每个进程提供的虚拟内存控件。由小地址到大地址依次是：只读的代码和数据、堆、共享库、栈、内核虚拟内存（为系统内存保留的）。</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>I/O设备可以抽象成文件。</p>
]]></content>
      <categories>
        <category>Basic knowledge</category>
      </categories>
      <tags>
        <tag>深入理解计算机系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode刷题笔记（树）</title>
    <url>/2019/11/12/Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E6%A0%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数据结构中有很多树的结构，其中包括二叉树、二叉搜索树、2-3树、红黑树等。<a id="more"></a></p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树是树结构中的基础，又包括了满二叉树树和完全二叉树。</p>
<h2 id="二叉搜索树（BST）"><a href="#二叉搜索树（BST）" class="headerlink" title="二叉搜索树（BST）"></a>二叉搜索树（BST）</h2><p>没有键值相等的节点，左子树 &lt; 根节点 &lt;= 右子树。<br>遍历方式有：先序遍历、中序遍历、后序遍历、层序遍历。中序遍历可得到升序数列。</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>在树尽量平衡的情况下，插入和搜索的时间复杂度为O(log n)（树高决定了查找效率）</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>要删除节点是叶节点，直接删除，修改其根节点指针</li>
<li>要删除节点是单支节点，直接删除，修改其根节点指向子节点</li>
<li>要删除节点是双支节点，找到右子树的单支节点替换，之后删除改单支节点  <h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2>左右两子树高度差绝对值不超过 1 ，分为平衡二叉搜索树、红黑树。<h2 id="平衡二叉搜索树（AVL树）"><a href="#平衡二叉搜索树（AVL树）" class="headerlink" title="平衡二叉搜索树（AVL树）"></a>平衡二叉搜索树（AVL树）</h2>避免了BST退化成链表的情况。主要是通过旋转来进行调整，分为四种情况“左左、左右、右左、右右”。1和4情况通过单旋转完成，2和3则需要双旋转。<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2>性质及其繁杂。<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li>
<li>树结构对迭代很友好</li>
<li>有的题目，左右节点做参数容易，这样就要用两个函数将root节点和后续节点分开</li>
<li>BFS方法也是层序遍历，用队列实现容易</li>
<li>DFS方法也是先序遍历，用迭代实现容易</li>
<li>树结构从上往下找，容易；从下往上找，难<h1 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2>BFS和DFS两种思想。BFS用队列实现、DFS用迭代实现。<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2>BFS：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">deque</span>&lt;TreeNode*&gt; deq;</span><br><span class="line">		deq.push_back(root);</span><br><span class="line">		<span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!deq.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			depth++;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = deq.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				TreeNode* cur = deq.front();</span><br><span class="line">				deq.pop_front();</span><br><span class="line">				<span class="keyword">if</span>(cur-&gt;left) deq.push_back(cur-&gt;left);</span><br><span class="line">				<span class="keyword">if</span>(cur-&gt;right) deq.push_back(cur-&gt;right);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> depth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
DFS：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> l = maxDepth(root-&gt;left) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> r = maxDepth(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> l &gt; r ? l : r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，找出其最小深度。最小深度是从根节点到最近叶子节点的最短路径上的节点数量。<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2>BFS，判断每层是否有叶节点。<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">deque</span>&lt;TreeNode*&gt;deq;</span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">		    deq.push_back(root);</span><br><span class="line">		<span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!deq.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			depth++;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = deq.<span class="built_in">size</span>();		</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				TreeNode* current = deq.front();</span><br><span class="line">				deq.pop_front();</span><br><span class="line">				<span class="keyword">if</span>(!current-&gt;left &amp;&amp; !current-&gt;right) <span class="keyword">return</span> depth;</span><br><span class="line">				<span class="keyword">if</span>(current-&gt;left) deq.push_back(current-&gt;left);</span><br><span class="line">				<span class="keyword">if</span>(current-&gt;right) deq.push_back(current-&gt;right);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="108-将有序数组转换为AVL树"><a href="#108-将有序数组转换为AVL树" class="headerlink" title="108.将有序数组转换为AVL树"></a>108.将有序数组转换为AVL树</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2>二分法找node，用迭代的DFS一个一个放进去。<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(nums.empty())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">TreeNode* <span class="title">helper</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(left &gt; right)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">		TreeNode* node = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">		node-&gt;left = helper(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">		node-&gt;right = helper(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">		<span class="keyword">return</span> node;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，判断它是否是高度平衡的二叉树。<h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2>想到了用DFS求深度的情况，但做不出来。看了别人的代码，原理两次递归。<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">int</span> dif = <span class="built_in">abs</span>(depth(root-&gt;left) - depth(root-&gt;right));</span><br><span class="line">		<span class="keyword">return</span> (dif &lt;= <span class="number">1</span>) &amp;&amp; isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode* node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(depth(node-&gt;left), depth(node-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2>翻转一棵二叉树。<h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2>DFS递归没变，注意这里的返回值，很有意思。<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* temp = root-&gt;left;</span><br><span class="line">            root-&gt;left = root-&gt;right;</span><br><span class="line">            root-&gt;right = temp;</span><br><span class="line">            invertTree(root-&gt;left);</span><br><span class="line">            invertTree(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235.二叉搜索树的最近公共祖先"></a>235.二叉搜索树的最近公共祖先</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。<h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2>这题澄清了我之前对二叉搜索树的误解，其实是根节点左子树的所有结点小于根节点，右节点可类比。<h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;val &gt; q-&gt;val) <span class="keyword">return</span> lowestCommonAncestor(root, q, p);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;val &lt;= root-&gt;val &amp;&amp; q-&gt;val &gt;= root-&gt;val)</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;val &lt; root-&gt;val &amp;&amp; q-&gt;val &lt; root-&gt;val)</span><br><span class="line">			<span class="keyword">return</span> lowestCommonAncestor(root-&gt;left, p, q);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;val &gt; root-&gt;val &amp;&amp; q-&gt;val &gt; root-&gt;val)</span><br><span class="line">			<span class="keyword">return</span> lowestCommonAncestor(root-&gt;right, p, q);</span><br><span class="line">		<span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257.二叉树的所有路径"></a>257.二叉树的所有路径</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，返回所有从根节点到叶子节点的路径。<h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2>DFS方法，遇到叶子结点后添加路径结果，利用引用传递结果，记录添加叶结点之前的路径。<h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; binaryTreePaths(TreeNode* root)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> p;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">		helper(root, p, res);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="built_in">string</span> path, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;result)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">		path.append(to_string(root-&gt;val));</span><br><span class="line">		<span class="keyword">if</span>(root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">			result.push_back(path);</span><br><span class="line">		path.append(<span class="string">"-&gt;"</span>);</span><br><span class="line">		helper(root-&gt;left, path, result);</span><br><span class="line">		helper(root-&gt;right, path, result);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h1><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2>计算给定二叉树的所有左叶子之和。<h2 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h2>深度优先搜索，注意是叶子的结点。通常情况下，两个函数把递归分开，把返回值用传值引用代替好理解。但是太简单这么做就太low了。<h2 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a>代码描述</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; ! root-&gt;left-&gt;right)</span><br><span class="line">			<span class="keyword">return</span> root-&gt;left-&gt;val + sumOfLeftLeaves(root-&gt;left) + sumOfLeftLeaves(root-&gt;right);</span><br><span class="line">		<span class="keyword">return</span> sumOfLeftLeaves(root-&gt;left) + sumOfLeftLeaves(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="437-路径总和Ⅲ"><a href="#437-路径总和Ⅲ" class="headerlink" title="437.路径总和Ⅲ"></a>437.路径总和Ⅲ</h1><h2 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h2>给定一个二叉树，它的每个结点都存放着一个整数值。找出路径和等于给定数值的路径总数。</li>
</ul>
<p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。</p>
<h2 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题很麻烦，没有确定的头和尾。用双重递归实现，一个确定头的情况，一个确定相对的尾的情况。</p>
<p>还可以用别的方法实现，BFS和DFS结合，实际思想和上述差不多。</p>
<h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> helper(root, sum) + pathSum(root-&gt;left, sum) + pathSum(root-&gt;right, sum);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		sum -= root-&gt;val;</span><br><span class="line">		<span class="keyword">return</span> (sum == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>) + helper(root-&gt;left, sum) + helper(root-&gt;right, sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h1><h2 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。</p>
<h2 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h2><p>二叉搜索树真的适合中序遍历。不过这个pre结点的设立还是挺不好操作的</p>
<h2 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* node, TreeNode*&amp; pre, <span class="keyword">int</span>&amp; min_num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node)</span><br><span class="line">        &#123;</span><br><span class="line">            helper(node-&gt;left, pre, min_num);</span><br><span class="line">            <span class="keyword">if</span>(pre)</span><br><span class="line">                min_num = <span class="built_in">min</span>(node-&gt;val - pre-&gt;val, min_num);</span><br><span class="line">            pre = node;</span><br><span class="line">            helper(node-&gt;right, pre, min_num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minimun = INT_MAX;</span><br><span class="line">        TreeNode* pre_root = <span class="literal">nullptr</span>;</span><br><span class="line">        helper(root, pre_root, minimun);</span><br><span class="line">        <span class="keyword">return</span> minimun;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h1><h2 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>
<h2 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题不和上题一样。</p>
<h2 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TreeNode* pre_root = <span class="literal">nullptr</span>;</span><br><span class="line">        helper(root, pre_root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* node, TreeNode*&amp; pre)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node)</span><br><span class="line">        &#123;</span><br><span class="line">            helper(node-&gt;right, pre);</span><br><span class="line">            <span class="keyword">if</span>(pre)</span><br><span class="line">                node-&gt;val = node-&gt;val + pre-&gt;val;</span><br><span class="line">            pre = node;</span><br><span class="line">            helper(node-&gt;left, pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="563-二叉树的坡度"><a href="#563-二叉树的坡度" class="headerlink" title="563.二叉树的坡度"></a>563.二叉树的坡度</h1><h2 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，计算整个树的坡度。</p>
<p>一个树的节点的坡度定义即为，该节点左子树的结点之和和右子树结点之和的差的绝对值。空结点的的坡度是0，整个树的坡度就是其所有节点的坡度之和。</p>
<h2 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h2><p>我终于明白了helper函数的用处了。有时候要做一个迭代，但不能在原函数上改，因为原函数的参数和返回值都确定了，所以用helper函数（注意这个helper函数的引用传参和返回值的不同）。</p>
<p>另外我终于明白了先序遍历和后序遍历的不同了，还有中序遍历。</p>
<h2 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTilt</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        helper(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">int</span>&amp; slope)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = helper(root-&gt;left, slope);</span><br><span class="line">        <span class="keyword">int</span> right = helper(root-&gt;right, slope);</span><br><span class="line">        slope += <span class="built_in">abs</span>(left - right);</span><br><span class="line">        <span class="keyword">return</span> left + right + root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="527-另一个树的子树"><a href="#527-另一个树的子树" class="headerlink" title="527.另一个树的子树"></a>527.另一个树的子树</h1><h2 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树</p>
<h2 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h2><p>上题目说了helper帮助实现单递归，这题是双重递归的典型。</p>
<h2 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* s, TreeNode* t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!s) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> isEqual(s, t) ? <span class="literal">true</span> : isSubtree(s-&gt;left, t) || isSubtree(s-&gt;right, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEqual</span><span class="params">(TreeNode* p, TreeNode* q)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p &amp;&amp; !q) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!p || !q) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> (p-&gt;val == q-&gt;val) &amp;&amp; isEqual(p-&gt;left, q-&gt;left) &amp;&amp; isEqual(p-&gt;right, q-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h1><h2 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p>
<p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p>
<h2 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h2><p>先序遍历？？我还以为是层序遍历。先序遍历，特别的是融合的过程。</p>
<h2 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* t1, TreeNode* t2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> t1;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> t2;</span><br><span class="line">        t1-&gt;val = t1-&gt;val + t2-&gt;val;</span><br><span class="line">        t1-&gt;left = mergeTrees(t1-&gt;left, t2-&gt;left);</span><br><span class="line">        t1-&gt;right = mergeTrees(t1-&gt;right, t2-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.二叉树的层平均值</h1><h2 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p>
<h2 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h2><p>层序遍历。下次考虑一下不用双端队列实现层序遍历。</p>
<h2 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; averageOfLevels(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; average;</span><br><span class="line">        <span class="built_in">deque</span>&lt;TreeNode*&gt; deq;</span><br><span class="line">        deq.push_back(root);</span><br><span class="line">        <span class="keyword">while</span>(!deq.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = deq.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* current = deq.front();</span><br><span class="line">                sum += current-&gt;val;</span><br><span class="line">                deq.pop_front();</span><br><span class="line">                <span class="keyword">if</span>(current-&gt;left) deq.push_back(current-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(current-&gt;right) deq.push_back(current-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            average.push_back(sum / <span class="built_in">size</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> average;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="653-两数之和Ⅳ-输入BST"><a href="#653-两数之和Ⅳ-输入BST" class="headerlink" title="653.两数之和Ⅳ-输入BST"></a>653.两数之和Ⅳ-输入BST</h1><h2 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>
<h2 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h2><p>中序遍历得到升序序列，双指针即可。BST可能有负数吗？</p>
<h2 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">findTarget</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">        helper(root, nums);</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> q = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p &lt; q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[p] + nums[q] &gt; k)</span><br><span class="line">                q--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[p] + nums[q] &lt; k)</span><br><span class="line">                p++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        helper(root-&gt;left, vec);</span><br><span class="line">        vec.push_back(root-&gt;val);</span><br><span class="line">        helper(root-&gt;right, vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="669-修建二叉搜索树"><a href="#669-修建二叉搜索树" class="headerlink" title="669.修建二叉搜索树"></a>669.修建二叉搜索树</h1><h2 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在[L, R]中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>
<h2 id="解题思路-16"><a href="#解题思路-16" class="headerlink" title="解题思路"></a>解题思路</h2><p>递归（不是遍历）</p>
<h2 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">trimBST</span><span class="params">(TreeNode* root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt; L)</span><br><span class="line">        &#123;   </span><br><span class="line">            root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">            root = trimBST(root-&gt;right, L, R);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &gt; R)</span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">            root = trimBST(root-&gt;left, L, R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;left = trimBST(root-&gt;left, L, R);</span><br><span class="line">            root-&gt;right = trimBST(root-&gt;right, L, R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="671-二叉树中第二小的节点"><a href="#671-二叉树中第二小的节点" class="headerlink" title="671.二叉树中第二小的节点"></a>671.二叉树中第二小的节点</h1><h2 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么这个节点的值不大于它的子节点的值。给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。</p>
<h2 id="解题思路-17"><a href="#解题思路-17" class="headerlink" title="解题思路"></a>解题思路</h2><h2 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h2><h1 id="687-最长同值路径"><a href="#687-最长同值路径" class="headerlink" title="687.最长同值路径"></a>687.最长同值路径</h1><h2 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。两个节点之间的路径长度由它们之间的边数表示。</p>
<h2 id="解题思路-18"><a href="#解题思路-18" class="headerlink" title="解题思路"></a>解题思路</h2><p>递归，计算每个节点的最长路径，更新最长路径。若该节点等于父节点，返回左子树或右子树中最长的路径，否则返回零。用于父节点计算最长的路径。</p>
<h2 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> max_set = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        helper(root, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> max_set - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode* root, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = helper(root-&gt;left, root-&gt;val);</span><br><span class="line">        <span class="keyword">int</span> r = helper(root-&gt;right, root-&gt;val);</span><br><span class="line">        max_set = <span class="built_in">max</span>(l + r + <span class="number">1</span>, max_set);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val == val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(l, r) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="559-N叉树的最大深度"><a href="#559-N叉树的最大深度" class="headerlink" title="559.N叉树的最大深度"></a>559.N叉树的最大深度</h1><h2 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 N 叉树，找到其最大深度。</p>
<h2 id="解题思路-19"><a href="#解题思路-19" class="headerlink" title="解题思路"></a>解题思路</h2><p>和二叉树一样。N叉树节点的定义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node*&gt; children;</span><br><span class="line"></span><br><span class="line">    Node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> _val) &#123;</span><br><span class="line">        val = _val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> _val, <span class="built_in">vector</span>&lt;Node*&gt; _children) &#123;</span><br><span class="line">        val = _val;</span><br><span class="line">        children = _children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Node* it : root-&gt;children)</span><br><span class="line">            depth = <span class="built_in">max</span>(depth, maxDepth(it));</span><br><span class="line">        <span class="keyword">return</span> depth + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="589-N叉树的前序遍历"><a href="#589-N叉树的前序遍历" class="headerlink" title="589.N叉树的前序遍历"></a>589.N叉树的前序遍历</h1><h2 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题目。</p>
<h2 id="解题思路-20"><a href="#解题思路-20" class="headerlink" title="解题思路"></a>解题思路</h2><p>下次用递归，迭代太占内存了。</p>
<h2 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorder(Node* root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        helper(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(Node* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        vec.push_back(root-&gt;val);</span><br><span class="line">        <span class="keyword">for</span>(Node* it : root-&gt;children)</span><br><span class="line">            helper(it, vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode刷题笔记（链表）</title>
    <url>/2019/11/04/Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E9%93%BE%E8%A1%A8%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>链表是一种常见的数据结构，是一种线性表。但不是按照线性顺序存储，而是在每个节点存储下一个节点的指针，插入时复杂度O(1)，但访问需要O(n)，而且由于存储指针空间开销大。链表允许插入和移除任意节点，但不允许随机存储。链表有很多类型，例如单向链表、双向链表、循环链表。本代码实现采用的原则是实现最佳方法或者陌生方法，暴力法最后考虑（暴力法总会遇到且与题目匹配性最差）。<a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Definition <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24.两两交换链表中的节点"></a>24.两两交换链表中的节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。例如1-&gt;2-&gt;3-&gt;4变为2-&gt;1-&gt;4-&gt;3，奇数的话，最后一个不管。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>典型的递归问题。<br>{<br>        终止条件；<br>        自己调用自己；<br>        调用自己的返回值；<br>}<br>递归一般先在前两句循环，触发返回条件后，疯狂在后两句循环。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">![question_61](Hexosourceimages/question_61.PNGclass Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ListNode* swapPairs(ListNode* head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* mem1 = head-&gt;next;</span><br><span class="line">        ListNode* mem2 = head-&gt;next-&gt;next;</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = swapPairs(mem2);</span><br><span class="line">        <span class="keyword">return</span> mem1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="82-删除排序链表中的重复元素Ⅱ"><a href="#82-删除排序链表中的重复元素Ⅱ" class="headerlink" title="82.删除排序链表中的重复元素Ⅱ"></a>82.删除排序链表中的重复元素Ⅱ</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先想到还是暴力法，但总觉得事情没那么简单。下面代码的思想真是让我醍醐灌顶，不过他结尾写的有点问题，我补充了下。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode* slow = dummy;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast-&gt;next != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;val != fast-&gt;next-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(slow-&gt;next == fast)</span><br><span class="line">                    slow = fast;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    slow-&gt;next = fast-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(slow-&gt;next-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">            slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141.环形链表"></a>141.环形链表</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表，判断链表中是否有环。为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>哈希表法、快慢指针法。双指针法关键是判断”慢指针能否追上快指针“。</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><p>双指针法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode* slow = head-&gt;next;</span><br><span class="line">        ListNode* fast = head-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">                <span class="keyword">if</span>(fast == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(fast == slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>反转一个单链表。</p>
<h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>递归法。递归法太NB了。</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><p>递归法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* p = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="92-反转链表Ⅱ"><a href="#92-反转链表Ⅱ" class="headerlink" title="92.反转链表Ⅱ"></a>92.反转链表Ⅱ</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转</p>
<h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>原地暴力法。迭代法很华丽看不懂，但我觉得舍本逐末了，程序的本意是华丽的简单，这也是迭代的初衷。</p>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode* pre = dummy;</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = pre-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m - <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* temp1 = pre-&gt;next;</span><br><span class="line">            ListNode* temp2 = cur-&gt;next-&gt;next;</span><br><span class="line">            pre-&gt;next = cur-&gt;next;</span><br><span class="line">            pre-&gt;next-&gt;next = temp1;</span><br><span class="line">            cur-&gt;next = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">        head = dummy-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummy;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234.回文链表"></a>234.回文链表</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>判断一个链表是否为回文链表。你能否用时间复杂度O(n)和空间复杂度O(1)解决问题。</p>
<h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>快慢指针法找到位置进行比较，头插法构建反向链表。奇偶判断的思想真是漂亮，完成了复杂度要求。这个回文链表是反转链表的进化。</p>
<h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* pre = head;</span><br><span class="line">        ListNode* prepre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = slow;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            pre-&gt;next = prepre;</span><br><span class="line">            prepre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast != <span class="literal">nullptr</span>)</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(slow != <span class="literal">nullptr</span> &amp;&amp; pre != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(slow-&gt;val != pre-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="109-有序链表转换二叉搜索树"><a href="#109-有序链表转换二叉搜索树" class="headerlink" title="109.有序链表转换二叉搜索树"></a>109.有序链表转换二叉搜索树</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>
<h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>完全没做过树的问题..懵。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
</search>
